model <- lm(formula, data = data)
robust <- coeftest(model, vcov = vcovHC(model, type = "HC1"))
list(estimate = robust["treat", "Estimate"], se = robust["treat", "Std. Error"],
intercept = robust["(Intercept)", "Estimate"], intercept_se = robust["(Intercept)", "Std. Error"])
}
# Run regressions for each bandwidth and store results
for (i in 1:nrow(ikbw_df)) {
data_above <- subset(munic, dep > -ikbw_df$ikbw[i] & dep < ikbw_df$ikbw[i] & illiter > med)
data_below <- subset(munic, dep > -ikbw_df$ikbw[i] & dep < ikbw_df$ikbw[i] & illiter < med)
formula <- as.formula(paste(y, "~", paste(x, collapse = " + ")))
# Run regressions for both groups
result_above <- run_regression(data_above, formula)
result_below <- run_regression(data_below, formula)
# Store results for "illiter > med" condition
coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]] <- result_above$estimate
se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]] <- result_above$se
intercept_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]] <- result_above$intercept
intercept_se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]] <- result_above$intercept_se
# Store results for "illiter < med" condition
coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]] <- result_below$estimate
se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]] <- result_below$se
intercept_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]] <- result_below$intercept
intercept_se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]] <- result_below$intercept_se
}
# Create output table similar to the Stata script
output_table <- matrix("", nrow = 7, ncol = 7)
# Create output table similar to the Stata script
output_table <- matrix("", nrow = 8, ncol = 7)
View(coef_list)
View(intercept_list)
View(intercept_se_list)
View(output_table)
output_table[1, 1] <- y
output_table[3, 1] <- "obs above"
output_table[6, 1] <- "obs below"
output_table[7, 1] <- "test of equality"
output_table[8, 1] <- "bandwidth"
# Populate coefficients and standard errors for each bandwidth condition
for (i in 1:ikbw_df$ikbw[i]) {
output_table[1, i + 3] <- sprintf("%.3f", coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]])
output_table[2, i + 3] <- sprintf("(%.3f)", se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]])
output_table[4, i + 4] <- sprintf("%.3f", coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]])
output_table[5, i + 4] <- sprintf("(%.3f)", se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]])
}
View(ikbw_df)
# Populate coefficients and standard errors for each bandwidth condition
for (i in 1:ikbw_df$ikbw[i]) {
output_table[1, i + 3] <- sprintf("%.3f", coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]])
output_table[2, i + 3] <- sprintf("(%.3f)", se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]])
output_table[4, i + 3] <- sprintf("%.3f", coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]])
output_table[5, i + 3] <- sprintf("(%.3f)", se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]])
}
4+3
# Populate coefficients and standard errors for each bandwidth condition
for (i in 1:nrow(ikbw_df)) {
output_table[1, i + 3] <- sprintf("%.3f", coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]])
output_table[2, i + 3] <- sprintf("(%.3f)", se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]])
output_table[4, i + 3] <- sprintf("%.3f", coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]])
output_table[5, i + 3] <- sprintf("(%.3f)", se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]])
}
View(output_table)
View(coef_list)
View(se_list)
# Fill coefficients intercepts and standard errors
output_table[1, 2] = sprintf("%.3f", intercept_list[[y, "_bw", ikbw_df$ikbw[1], "_above")]])
# Fill coefficients intercepts and standard errors
output_table[1, 2] = sprintf("%.3f", intercept_list[[paste0(y, "_bw", ikbw_df$ikbw[1], "_above"))]])
# Fill coefficients intercepts and standard errors
output_table[1, 2] = sprintf("%.3f", intercept_list[[paste0(y, "_bw", ikbw_df$ikbw[1], "_above")]])
output_table[2, 2] = sprintf("(%.3f)", intercept_se_list[[paste0(y, "_bw", ikbw_df$ikbw[1], "_above")]])
output_table[4, 2] = sprintf("%.3f", intercept_list[[paste0(y, "_bw", ikbw_df$ikbw[1], "_below")]])
output_table[5, 2] = sprintf("(%.3f)", intercept_se_list[[paste0(y, "_bw", ikbw_df$ikbw[1], "_below")]])
# Fill IKBW
output_table[1, 3] = ikbw_df$ikbw[1]
output_table[4, 3] = ikbw_df$ikbw[1]
# Add bandwidth and observation counts
output_table[3, 2:3] <- c("—", "—")
output_table[6:8, 2:3] <- c("—", "—")
for (j in 1:nrow(ikbw_df)) {
output_table[3, j + 3] = ikbw_df$obs_above[j]
output_table[6, j + 3] = ikbw_df$obs_below[j]
}
output_table[8, 2:7] = c("—", "—", "IKBW", "20000", "10000", "5000")
output_table[7, 1] = "TEs (p-value)"
coef_list$r_util98_bw11873_above
robust
result_above["treat", "Estimate"] - result_below["treat", "Estimate"]
View(result_above)
result_above$estimate["treat", "Estimate"] - result_below$estimate["treat", "Estimate"]
te = result_above$estimate - result_below$estimate
se_te = sqrt(result_above$se^2 + result_below$se^2)
z_score = te/se_te
p_value = 2*(1-pnorm(abs(z_score)))
result_above$estimate - result_below
result_above$estimate - result_below$estimate
summary(result_above$estimate - result_below$estimate)
se_te = sqrt((result_above$se)^2 + (result_below$se)^2)
z_score = te/se_te
p_value = 2*(1-pnorm(abs(z_score)))
robust
vcovHC(model, type = "HC1")
t = vcovHC(result_above, type = "HC1")
pacman::p_load("tidyverse",
"estimatr",
"stats",
"fixest",
"rdrobust",
"rddensity",
"robust",
"rdd",
"miceadds",
"rddtools",
"here",
"cowplot",
"scales",
"stargazer",
"foreign",
"basedosdados",
"systemfit")
pacman::p_load("tidyverse",
"estimatr",
"stats",
"fixest",
"rdrobust",
"rddensity",
"robust",
"rdd",
"miceadds",
"rddtools",
"here",
"cowplot",
"scales",
"stargazer",
"foreign",
"basedosdados",
"systemfit")
system_eq = systemfit(
list(above = formula, below = formula),
data = list(above = data_above, below = data_below),
method = "SUR"
)
y = "r_util98"
x = c("treat", "dep", "deptreat")
med = 25.43
ikbw = c(11873, 20000, 10000, 5000)
obs_above = c(116, 279, 103, 49)
obs_below = c(149, 279, 126, 67)
ikbw_df = data.frame(ikbw, obs_above, obs_below)
# Initialize lists for results
coef_list = list()
se_list = list()
intercept_list = list()
intercept_se_list = list()
te_results = list()  # Store test results for equality
# Function for regression under different conditions
run_regression = function(data, formula) {
model = lm(formula, data = data)
robust = coeftest(model, vcov = vcovHC(model, type = "HC1"))
list(estimate = robust["treat", "Estimate"], se = robust["treat", "Std. Error"],
intercept = robust["(Intercept)", "Estimate"], intercept_se = robust["(Intercept)", "Std. Error"])
}
# Run regressions for each bandwidth and store results
for (i in 1:nrow(ikbw_df)) {
data_above = subset(munic, dep > -ikbw_df$ikbw[i] & dep < ikbw_df$ikbw[i] & illiter > med)
data_below = subset(munic, dep > -ikbw_df$ikbw[i] & dep < ikbw_df$ikbw[i] & illiter < med)
formula = as.formula(paste(y, "~", paste(x, collapse = " + ")))
# Run regressions for both groups
result_above = run_regression(data_above, formula)
result_below = run_regression(data_below, formula)
# Store results for "illiter > med" condition
coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]] = result_above$estimate
se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]] = result_above$se
intercept_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]] = result_above$intercept
intercept_se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]] = result_above$intercept_se
# Store results for "illiter < med" condition
coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]] = result_below$estimate
se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]] = result_below$se
intercept_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]] = result_below$intercept
intercept_se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]] = result_below$intercept_se
# Calculating the test of equality
te = result_above$estimate - result_below$estimate
se_te = sqrt((result_above$se)^2 + (result_below$se)^2)
# Calculating p-value
z_score = te/se_te
p_value = 2*(1-pnorm(abs(z_score)))
# Storing the result
te_results[[paste0("bw_", ikbw_df$ikbw[i])]] = list(
difference = te,
standard_error = se_te,
p_value = p_value
)
}
output_table = matrix("", nrow = 8, ncol = 7)
output_table[1, 1] = y
output_table[3, 1] = "obs above"
output_table[6, 1] = "obs below"
output_table[7, 1] = "TEs (p-value)"
output_table[8, 1] = "bandwidth"
# Populate coefficients and standard errors for each bandwidth condition
for (i in 1:nrow(ikbw_df)) {
output_table[1, i + 3] = sprintf("%.3f", coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]])
output_table[2, i + 3] = sprintf("(%.3f)", se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_above")]])
output_table[4, i + 3] = sprintf("%.3f", coef_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]])
output_table[5, i + 3] = sprintf("(%.3f)", se_list[[paste0(y, "_bw", ikbw_df$ikbw[i], "_below")]])
}
# Fill coefficients intercepts and standard errors
output_table[1, 2] = sprintf("%.3f", intercept_list[[paste0(y, "_bw", ikbw_df$ikbw[1], "_above")]])
output_table[2, 2] = sprintf("(%.3f)", intercept_se_list[[paste0(y, "_bw", ikbw_df$ikbw[1], "_above")]])
output_table[4, 2] = sprintf("%.3f", intercept_list[[paste0(y, "_bw", ikbw_df$ikbw[1], "_below")]])
output_table[5, 2] = sprintf("(%.3f)", intercept_se_list[[paste0(y, "_bw", ikbw_df$ikbw[1], "_below")]])
# Fill IKBW
output_table[1, 3] = ikbw_df$ikbw[1]
output_table[4, 3] = ikbw_df$ikbw[1]
# Add bandwidth and observation counts
output_table[3, 2:3] = c("—", "—")
output_table[6:8, 2:3] = c("—", "—")
for (j in 1:nrow(ikbw_df)) {
output_table[3, j + 3] = ikbw_df$obs_above[j]
output_table[6, j + 3] = ikbw_df$obs_below[j]
}
output_table[8, 2:7] = c("—", "—", "IKBW", "20000", "10000", "5000")
View(output_table)
View(te_results)
te_results[1]
te_results[1][3]
te_results[1][2]
# Fill equality test's p-values
output_table[7, 4:7] = te_results$bw_11873$p_value
# Fill equality test's p-values
output_table[7, 4] = te_results$bw_11873$p_value
output_table[7, 5] = te_results$bw_20000$p_value
output_table[7, 6] = te_results$bw_10000$p_value
output_table[7, 7] = te_results$bw_5000$p_value
# Fill equality test's p-values
output_table[7, 4] = round(te_results$bw_11873$p_value, 3)
# Fill equality test's p-values
output_table[7, 4] = round(te_results$bw_11873$p_value, 3)
output_table[7, 5] = round(te_results$bw_20000$p_value, 3)
output_table[7, 6] = round(te_results$bw_10000$p_value, 3)
output_table[7, 7] = round(te_results$bw_5000$p_value, 3)
# Convert to data frame for stargazer output
output_df = as.data.frame(output_table)
View(output_df)
colnames(output_df) = c("", "Pre-Treat. (SE)", "IKBW (Obs)", "(1)", "(2)", "(3)", "(4")
colnames(output_df) = c("", "Pre-Treat. (SE)", "IKBW (Obs)", "(1)", "(2)", "(3)", "(4)")
# Display the table with stargazer
stargazer(
output_df,
type = "text",
summary = FALSE,
title = "Table II - Panel C",
rownames = FALSE
)
for (i in 1:nrow(ikbw_df)) {
# Subset data
data_above = subset(munic, dep > -ikbw_df$ikbw[i] & dep < ikbw_df$ikbw[i] & illiter > med)
data_below = subset(munic, dep > -ikbw_df$ikbw[i] & dep < ikbw_df$ikbw[i] & illiter < med)
# Combine datasets and create indicator for group
combined_data = rbind(data_above, data_below)
combined_data$group = ifelse(combined_data$illiter > med, 1, 0)
# Update formula to include interaction with group
formula = as.formula(paste(y, "~", paste(x, collapse = " + "), "+ group + treat:group"))
# Run regression on combined data
model_combined = lm(formula, data = combined_data)
# Extract coefficients and covariance matrix
coef_combined = coef(model_combined)
vcov_combined = vcov(model_combined)
# Calculate the difference between the treat coefficients for the two groups
te = coef_combined["treat"] + coef_combined["treat:group"]
# Calculate standard error for the difference, considering covariance
se_te = sqrt(vcov_combined["treat", "treat"] +
vcov_combined["treat:group", "treat:group"] +
2 * vcov_combined["treat", "treat:group"])
# Calculate z-score and p-value
z_score = te / se_te
p_value = 2 * (1 - pnorm(abs(z_score)))
# Store the result
te_results[[paste0("bw_", ikbw_df$ikbw[i])]] = list(
difference = te,
standard_error = se_te,
p_value = p_value
)
}
View(te_results)
ikbw = c()
bwo = rdbwselect_2014(munic[["income"]], munic$dep, 0, kernel = "uniform", bwselect = "IK")
View(munic)
munic[["income"]]
munic$dep
y = munic[["income"]]
x = munic$dep
bwo = rdbwselect_2014(y, x, c = 0, kernel = "uniform", bwselect = "IK")
bwo$bws
View(bwo)
bwo = rdbwselect_2014(y, x, c = 0, kernel = "triangular", bwselect = "IK")
bwo = rdbwselect_2014(y, x, c = 0, kernel = "uniform", bwselect = "IK")
View(munic)
df = munic %>%
filter(bw =< 20000)
df = munic %>%
filter(bw <= 20000)
y = df[["income"]]
x = df$dep
bwo = rdbwselect_2014(y, x, c = 0, kernel = "uniform", bwselect = "IK")
y = df[["gini"]]
bwo = rdbwselect_2014(y, x, c = 0, kernel = "uniform", bwselect = "IK")
bwo$bws[2]
for (var in covars) {
y = munic[[var]]
x = munic$dep
bwo = rdbwselect_2014(y, x, c = 0, kernel = "uniform", bwselect = "IK")
ikbw = append(ikbw, bwo$bws[2])
}
for (var in covars) {
y = munic[[var]]
x = munic$dep
bwo = rdbwselect_2014(y, x, c = 0, kernel = "uniform", bwselect = "IK")
ikbw = append(ikbw, bwo$bws[1])
}
View(bwo)
IKbandwidth(y, x, cutpoint = 0, kernel = "uniform")
rd = rdd_data(x = munic$dep, y = munic[[var]], cutpoint = 0)
rd = rdd_data(x = munic$dep, y = munic[[var]], cutpoint = 0)
bwo = rdd_bw_ik(rd, kernel = "Uniform")
bwo
as.numeric(bwo)
ikbw = c()
for (var in covars) {
rd = rdd_data(x = munic$dep, y = munic[[var]], cutpoint = 0)
bwo = rdd_bw_ik(rd, kernel = "Uniform")
ikbw = append(ikbw, as.numeric(bwo))
}
ikbw = c()
for (var in covars) {
rd = rdd_data(x = munic$dep, y = munic[[var]], cutpoint = 0)
bwo = rdd_bw_ik(rd, kernel = "Uniform")
ikbw = append(ikbw, ifelse(as.numeric(bwo) > 20000, 20000, as.numeric(bwo)))
}
ikbw
obs = c(558, 377, 412, 345, 389, 372, 558, 558, 454, 558)
ikbw_df = data.frame(covars, ikbw, obs)
View(ikbw_df)
ikbw = c()
for (var in covars) {
rd = rdd_data(x = munic$dep, y = munic[[var]], cutpoint = 0)
bwo = rdd_bw_ik(rd, kernel = "Uniform")
ikbw = append(ikbw, ifelse(as.numeric(bwo) > 20000, 20000, floor(as.numeric(bwo))))
}
ikbw_df = data.frame(covars, ikbw, obs)
coef_list = list()
se_list = list()
intercept_list = list()
intercept_se_list = list()
# Calculate means and standard deviations for each variable
mean_sd_list = list()
# Loop through each variable and estimate models with three bandwidths
for (i in 1:nrow(ikbw_df)) {
var = ikbw_df$covars[i]
# Regression with IK optimal bandwidth
model1 = lm(as.formula(paste(var, "~ treat + dep + deptreat")), data = subset(munic, bw < ikbw_df$ikbw[i]))
robust1 = coeftest(model1, vcov = vcovHC(model1, type = "HC1"))
coef_list[[paste0(var, "_bw1")]] = robust1["treat", "Estimate"]
se_list[[paste0(var, "_bw1")]] = robust1["treat", "Std. Error"]
intercept_list[[paste0(var, "_bw1")]] = robust1["(Intercept)", "Estimate"]
intercept_se_list[[paste0(var, "_bw1")]] = robust1["(Intercept)", "Std. Error"]
# Regression with bandwidth < 10000
model2 = lm(as.formula(paste(var, "~ treat + dep + deptreat")), data = subset(munic, bw < 10000))
robust2 = coeftest(model2, vcov = vcovHC(model2, type = "HC1"))
coef_list[[paste0(var, "_bw2")]] = robust2["treat", "Estimate"]
se_list[[paste0(var, "_bw2")]] = robust2["treat", "Std. Error"]
# Regression with bandwidth < 5000
model3 = lm(as.formula(paste(var, "~ treat + dep + deptreat")), data = subset(munic, bw < 5000))
robust3 = coeftest(model3, vcov = vcovHC(model3, type = "HC1"))
coef_list[[paste0(var, "_bw3")]] = robust3["treat", "Estimate"]
se_list[[paste0(var, "_bw3")]] = robust3["treat", "Std. Error"]
# Calculate mean and standard deviation for the variable
mean_val = mean(munic[[var]], na.rm = TRUE)
sd_val = sd(munic[[var]], na.rm = TRUE)
mean_sd_list[[var]] = c(mean_val, sd_val)
}
# Create a matrix to display in stargazer
output_table = matrix("", nrow = length(covars) * 2 + 2, ncol = 7)
# Fill the first column with variable names, "bandwidth", and "obs"
output_table[seq(1, length(covars) * 2, 2), 1] = covars
output_table[length(covars) * 2 + 1, 1] = "bandwidth"
output_table[length(covars) * 2 + 2, 1] = "obs"
# Fill the remaining columns with coefficients, robust standard errors, means, standard deviations, bandwidths, and observations
for (j in 1:length(covars)) {
var = covars[j]
# Fill coefficients and robust standard errors for each specification
output_table[2 * j - 1, 3] = sprintf("%.3f", intercept_list[[paste0(var, "_bw1")]])
output_table[2 * j, 3] = sprintf("(%.3f)", intercept_se_list[[paste0(var, "_bw1")]])
output_table[2 * j - 1, 5] = sprintf("%.3f", coef_list[[paste0(var, "_bw1")]])
output_table[2 * j, 5] = sprintf("(%.3f)", se_list[[paste0(var, "_bw1")]])
output_table[2 * j - 1, 6] = sprintf("%.3f", coef_list[[paste0(var, "_bw2")]])
output_table[2 * j, 6] = sprintf("(%.3f)", se_list[[paste0(var, "_bw2")]])
output_table[2 * j - 1, 7] = sprintf("%.3f", coef_list[[paste0(var, "_bw3")]])
output_table[2 * j, 7] = sprintf("(%.3f)", se_list[[paste0(var, "_bw3")]])
# Fill mean and standard deviation
output_table[2 * j - 1, 2] = sprintf("%.3f", mean_sd_list[[var]][1])
output_table[2 * j, 2] = sprintf("(%.3f)", mean_sd_list[[var]][2])
# Fill ikbw and obs
output_table[2 * j - 1, 4] = ikbw_df$ikbw[j]
output_table[2 * j, 4] = ikbw_df$obs[j]
}
# Add bandwidth and observations to the last two rows
output_table[length(covars) * 2 + 1, 2:7] = c("—", "—", "—", "IKBW", "10000", "5000")
output_table[length(covars) * 2 + 2, 2:7] = c("5281", "—", "—", "—", "229", "116")
# Convert the matrix to a data frame and set column names
output_df = as.data.frame(output_table)
colnames(output_df) = c("", "Mean (SD)", "Pre-Treat. (SE)", "IKBW (Obs)", "(1)", "(2)", "(3)")
# Display the table with stargazer
stargazer(
output_df,
type = "text",
summary = FALSE,
title = "Table I",
rownames = FALSE
)
# Figure 2
final_plot1
# Figure 3
final_plot2
# Defina o seu projeto no Google Cloud
set_billing_id("projetoapp-340617")
# Para carregar o dado direto no R
query <- "
SELECT
dados.ano as ano,
dados.id_eleicao as id_eleicao,
dados.tipo_eleicao as tipo_eleicao,
dados.sigla_uf AS sigla_uf,
diretorio_sigla_uf.nome AS sigla_uf_nome,
dados.id_municipio AS id_municipio,
diretorio_id_municipio.nome AS id_municipio_nome,
dados.id_municipio_tse AS id_municipio_tse,
diretorio_id_municipio_tse.nome AS id_municipio_tse_nome,
dados.cargo as cargo,
dados.aptos as aptos,
dados.aptos_totalizadas as aptos_totalizadas,
dados.comparecimento as comparecimento,
dados.abstencoes as abstencoes,
dados.votos_validos as votos_validos,
dados.votos_brancos as votos_brancos,
dados.votos_nulos as votos_nulos,
dados.votos_nominais as votos_nominais,
dados.votos_legenda as votos_legenda,
dados.proporcao_comparecimento as proporcao_comparecimento,
dados.proporcao_votos_validos as proporcao_votos_validos,
dados.proporcao_votos_brancos as proporcao_votos_brancos,
dados.proporcao_votos_nulos as proporcao_votos_nulos
FROM `basedosdados.br_tse_eleicoes.detalhes_votacao_municipio` AS dados
LEFT JOIN (SELECT DISTINCT sigla,nome  FROM `basedosdados.br_bd_diretorios_brasil.uf`) AS diretorio_sigla_uf
ON dados.sigla_uf = diretorio_sigla_uf.sigla
LEFT JOIN (SELECT DISTINCT id_municipio,nome  FROM `basedosdados.br_bd_diretorios_brasil.municipio`) AS diretorio_id_municipio
ON dados.id_municipio = diretorio_id_municipio.id_municipio
LEFT JOIN (SELECT DISTINCT id_municipio_tse,nome  FROM `basedosdados.br_bd_diretorios_brasil.municipio`) AS diretorio_id_municipio_tse
ON dados.id_municipio_tse = diretorio_id_municipio_tse.id_municipio_tse
"
read_sql(query, billing_project_id = get_billing_id())
read_sql(query, billing_project_id = get_billing_id())
pacman::p_load(bigrquery)
bq_auth(email = "gustaveconomiafurg@gmail.com", scopes = "https://www.googleapis.com/auth/bigquery")
read_sql(query, billing_project_id = get_billing_id())
df = read_sql(query, billing_project_id = get_billing_id())
# Defina o seu projeto no Google Cloud
set_billing_id("projetoapp-340617")
#bq_auth(email = "gustaveconomiafurg@gmail.com", scopes = "https://www.googleapis.com/auth/bigquery")
# Para carregar o dado direto no R
query <- "
SELECT
dados.ano as ano,
dados.id_eleicao as id_eleicao,
dados.tipo_eleicao as tipo_eleicao,
dados.sigla_uf AS sigla_uf,
diretorio_sigla_uf.nome AS sigla_uf_nome,
dados.id_municipio AS id_municipio,
diretorio_id_municipio.nome AS id_municipio_nome,
dados.id_municipio_tse AS id_municipio_tse,
diretorio_id_municipio_tse.nome AS id_municipio_tse_nome,
dados.cargo as cargo,
dados.aptos as aptos,
dados.aptos_totalizadas as aptos_totalizadas,
dados.comparecimento as comparecimento,
dados.abstencoes as abstencoes,
dados.votos_validos as votos_validos,
dados.votos_brancos as votos_brancos,
dados.votos_nulos as votos_nulos,
dados.votos_nominais as votos_nominais,
dados.votos_legenda as votos_legenda,
dados.proporcao_comparecimento as proporcao_comparecimento,
dados.proporcao_votos_validos as proporcao_votos_validos,
dados.proporcao_votos_brancos as proporcao_votos_brancos,
dados.proporcao_votos_nulos as proporcao_votos_nulos
FROM `basedosdados.br_tse_eleicoes.detalhes_votacao_municipio` AS dados
LEFT JOIN (SELECT DISTINCT sigla,nome  FROM `basedosdados.br_bd_diretorios_brasil.uf`) AS diretorio_sigla_uf
ON dados.sigla_uf = diretorio_sigla_uf.sigla
LEFT JOIN (SELECT DISTINCT id_municipio,nome  FROM `basedosdados.br_bd_diretorios_brasil.municipio`) AS diretorio_id_municipio
ON dados.id_municipio = diretorio_id_municipio.id_municipio
LEFT JOIN (SELECT DISTINCT id_municipio_tse,nome  FROM `basedosdados.br_bd_diretorios_brasil.municipio`) AS diretorio_id_municipio_tse
ON dados.id_municipio_tse = diretorio_id_municipio_tse.id_municipio_tse
"
df = read_sql(query, billing_project_id = get_billing_id())
View(df)
df %>% filter(ano %in% c(1994, 1998, 2002))
df = read_sql(query, billing_project_id = get_billing_id()) %>%
filter(ano %in% c(1994, 1998, 2002) & cargo == "governador")
21922/3
dim(df %>% distinct(id_municipio))[1]
dim(df %>% distinct(id_municipio_tse))[1]
dim(df %>% filter(ano == 1994) %>% distinct(id_municipio))[1]
dim(df %>% filter(ano == 1994) %>% distinct(id_municipio_tse))[1]
