model2 = lm(as.formula(paste(var, "~", paste(covars[3:52], collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "_sum")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "_sum")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "_sum")]] = clustered["z", "Pr(>|t|)"]
}
# Panel C
data_filtered = df_state %>%
filter(year == 1998)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[1], "~", paste0(covars[c(1, 3:25)], collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
var = var_list1[6]
model2 = lm(as.formula(paste(var, "~", paste(covars[c(1, 3:25)], collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "98")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "98")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "98")]] = clustered["z", "Pr(>|t|)"]
data_filtered = df_state %>%
filter(year == 2002)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[2], "~", paste0(covars[c(1, 3:25)], collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
var = var_list1[6]
model2 = lm(as.formula(paste(var, "~", paste(covars[c(1, 3:25)], collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "02")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "02")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "02")]] = clustered["z", "Pr(>|t|)"]
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(covars[c(1, 3:52)], collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[6]
model2 = lm(as.formula(paste(var, "~", paste(covars[c(1, 3:52)], collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "_diff")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "_diff")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "_diff")]] = clustered["z", "Pr(>|t|)"]
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[4], "~", paste0(covars[c(1, 3:52)], collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[6]
model2 = lm(as.formula(paste(var, "~", paste(covars[c(1, 3:52)], collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "_sum")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "_sum")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "_sum")]] = clustered["z", "Pr(>|t|)"]
data_filtered = df_state %>%
filter(year == 1998)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[1], "~", paste0(covars[2:25], collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
var = var_list1[7]
model2 = lm(as.formula(paste(var, "~", paste(covars[2:25], collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "98")]] = (clustered["z", "Estimate"])*100
se_list[[paste0(var, "98")]] = (clustered["z", "Std. Error"])*100
p_value_list[[paste0(var, "98")]] = clustered["z", "Pr(>|t|)"]
data_filtered = df_state %>%
filter(year == 2002)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[2], "~", paste0(covars[2:25], collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
var = var_list1[7]
model2 = lm(as.formula(paste(var, "~", paste(covars[2:25], collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "02")]] = (clustered["z", "Estimate"])*100
se_list[[paste0(var, "02")]] = (clustered["z", "Std. Error"])*100
p_value_list[[paste0(var, "02")]] = clustered["z", "Pr(>|t|)"]
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(covars[2:52], collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[7]
model2 = lm(as.formula(paste(var, "~", paste(covars[2:52], collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "_diff")]] = (clustered["z", "Estimate"])*100
se_list[[paste0(var, "_diff")]] = (clustered["z", "Std. Error"])*100
p_value_list[[paste0(var, "_diff")]] = clustered["z", "Pr(>|t|)"]
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[4], "~", paste0(covars[2:52], collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[7]
model2 = lm(as.formula(paste(var, "~", paste(covars[2:52], collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "_sum")]] = (clustered["z", "Estimate"])*100
se_list[[paste0(var, "_sum")]] = (clustered["z", "Std. Error"])*100
p_value_list[[paste0(var, "_sum")]] = clustered["z", "Pr(>|t|)"]
# Create a matrix to display in stargazer
output_table = matrix("", nrow = 23, ncol = 6)
# Fill the first column with variable names, "bandwidth", and "obs"
output_table[seq(1, length(var_list0)*3, 3), 1] = var_list0
for (j in 1:length(var_list1)) {
var = var_list1[j]
var2 = var_list0[j]
# Fill coefficients and robust standard errors for each specification
output_table[3*j - 2, 3] = sprintf("%.3f", coef_list[[paste0(var, "98")]])
output_table[3*j - 1, 3] = sprintf("(%.3f)", se_list[[paste0(var, "98")]])
output_table[3*j, 3] = sprintf("(%.3f)", p_value_list[[paste0(var, "98")]])
output_table[3*j - 2, 4] = sprintf("%.3f", coef_list[[paste0(var, "02")]])
output_table[3*j - 1, 4] = sprintf("(%.3f)", se_list[[paste0(var, "02")]])
output_table[3*j, 4] = sprintf("(%.3f)", p_value_list[[paste0(var, "02")]])
# Fill linear combinations
output_table[3*j - 2, 5] = sprintf("%.3f", coef_list[[paste0(var2, "_diff")]])
output_table[3*j - 1, 5] = sprintf("(%.3f)", se_list[[paste0(var2, "_diff")]])
output_table[3*j, 5] = sprintf("(%.3f)", p_value_list[[paste0(var2, "_diff")]])
output_table[3*j - 2, 6] = sprintf("%.3f", coef_list[[paste0(var2, "_sum")]])
output_table[3*j - 1, 6] = sprintf("(%.3f)", se_list[[paste0(var2, "_sum")]])
output_table[3*j, 6] = sprintf("(%.3f)", p_value_list[[paste0(var2, "_sum")]])
# Fill mean and standard deviation
output_table[3*j - 2, 2] = sprintf("%.3f", mean_sd_list[[var2]][1])
output_table[3*j - 1, 2] = sprintf("(%.3f)", mean_sd_list[[var2]][2])
}
output_table[c(4, 7), 2] = c("—", "—")
output_table[c(5, 8), 2] = c("", "")
output_table[22, 1] = "N (State-Terms)"
output_table[23, 1] = "N (State/1st Diffs)"
output_table[22, 2:6] = c("—", "54", "54", "—", "—")
output_table[23, 2:6] = c("—", "27", "27", "—", "—")
# Convert to data frame for stargazer output
output_df = as.data.frame(output_table)
colnames(output_df) = c("", "Sample Avg.", "Paper-Disc.", "Disc.-Electr.", "Linear Comb. 1", "Linear Comb. 2")
# Display the table with stargazer
stargazer(
output_df,
type = "text",
summary = FALSE,
title = "Table V",
rownames = FALSE
)
control_list = c("ag_lgdp", "ag_gini", "illiter", "ag_poverty", "ag_lpop", "area", "ag_munic_percapita", "none")
df_state = df_state %>%
mutate(across(all_of(control_list),
list(intcont98 = ~ if_else(year == 1998, lag(.), 0),
intcont02 = ~ if_else(year == 2002, lag(., 2), 0)),
.names = "{.fn}_{.col}")) %>%
mutate(restsamp = ifelse(uf %in% c("AL", "AP", "RJ", "RR"), 0, 1))
var_list0 = c("util_rate", "ag_ssaude", "ag_vis7_ined2", "ag_lb_ined")
# Calculate means and standard deviations for each variable
coef_list = list()
se_list = list()
p_value_list = list()
covars = c("ag_vis_ined_cover", "ag_lb_ined_cover", colnames(df_state %>%
select(starts_with("reg") | starts_with("delec") | starts_with("duf") | starts_with("dtrend_elec"))))
control_vars98 = colnames(df_state %>%
select(starts_with("intcont98")))[c(1, 3, 5, 4, 2, 6, 7)]
control_vars02 = colnames(df_state %>%
select(starts_with("intcont02")))[c(1, 3, 5, 4, 2, 6, 7)]
# Colunm 1
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(c(control_list[c(1, 5, 2, 4)], covars[3:52]), collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
for (j in 1:length(var_list0[1:2])) {
var = var_list0[j]
model2 = lm(as.formula(paste(var, "~", paste(c(control_list[c(1, 5, 2, 4)], covars[3:52]), collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "1")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "1")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "1")]] = clustered["z", "Pr(>|t|)"]
}
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(c(control_list[c(1, 5, 2, 4)], covars[c(1, 3:52)]), collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[3]
model2 = lm(as.formula(paste(var, "~", paste(c(control_list[c(1, 5, 2, 4)], covars[c(1, 3:52)]), collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "1")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "1")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "1")]] = clustered["z", "Pr(>|t|)"]
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(c(control_list[c(1, 5, 2, 4)], covars[2:52]), collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[4]
model2 = lm(as.formula(paste(var, "~", paste(c(control_list[c(1, 5, 2, 4)], covars[2:52]), collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "1")]] = (clustered["z", "Estimate"])*100
se_list[[paste0(var, "1")]] = (clustered["z", "Std. Error"])*100
p_value_list[[paste0(var, "1")]] = clustered["z", "Pr(>|t|)"]
# Columns 2-8
for (i in 1:length(control_vars02)) {
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(c(control_vars98[i], control_vars02[i], covars[3:52]), collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
for (j in 1:length(var_list0[1:2])) {
var = var_list0[j]
model2 = lm(as.formula(paste(var, "~", paste(c(control_vars98[i], control_vars02[i], covars[3:52]), collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, i+1)]] = clustered["z", "Estimate"]
se_list[[paste0(var, i+1)]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, i+1)]] = clustered["z", "Pr(>|t|)"]
}
}
for (i in 1:length(control_vars02)) {
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(c(control_vars98[i], control_vars02[i], covars[c(1, 3:52)]), collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[3]
model2 = lm(as.formula(paste(var, "~", paste(c(control_vars98[i], control_vars02[i], covars[c(1, 3:52)]), collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, i+1)]] = clustered["z", "Estimate"]
se_list[[paste0(var, i+1)]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, i+1)]] = clustered["z", "Pr(>|t|)"]
}
for (i in 1:length(control_vars02)) {
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(c(control_vars98[i], control_vars02[i], covars[2:52]), collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[4]
model2 = lm(as.formula(paste(var, "~", paste(c(control_vars98[i], control_vars02[i], covars[2:52]), collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, i+1)]] = (clustered["z", "Estimate"])*100
se_list[[paste0(var, i+1)]] = (clustered["z", "Std. Error"])*100
p_value_list[[paste0(var, i+1)]] = clustered["z", "Pr(>|t|)"]
}
# Column 9
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(c(control_vars98[5:6], control_vars02[5:6], covars[3:52]), collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
for (j in 1:length(var_list0[1:2])) {
var = var_list0[j]
model2 = lm(as.formula(paste(var, "~", paste(c(control_vars98[5:6], control_vars02[5:6], covars[3:52]), collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "9")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "9")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "9")]] = clustered["z", "Pr(>|t|)"]
}
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(c(control_vars98[5:6], control_vars02[5:6], covars[c(1, 3:52)]), collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[3]
model2 = lm(as.formula(paste(var, "~", paste(c(control_vars98[5:6], control_vars02[5:6], covars[c(1, 3:52)]), collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "9")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "9")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "9")]] = clustered["z", "Pr(>|t|)"]
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(c(control_vars98[5:6], control_vars02[5:6], covars[2:52]), collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[4]
model2 = lm(as.formula(paste(var, "~", paste(c(control_vars98[5:6], control_vars02[5:6], covars[2:52]), collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "9")]] = (clustered["z", "Estimate"])*100
se_list[[paste0(var, "9")]] = (clustered["z", "Std. Error"])*100
p_value_list[[paste0(var, "9")]] = clustered["z", "Pr(>|t|)"]
# Column 10
df = subset(df_state, restsamp == 1)
model1 = lm(as.formula(paste0(var_list2[3], "~", paste(covars[3:52], collapse = " + "))), data = df)
df$z = residuals(model1)
for (j in 1:length(var_list0[1:2])) {
var = var_list0[j]
model2 = lm(as.formula(paste(var, "~", paste(covars[3:52], collapse = " + "))),
data = df)
df$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "10")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "10")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "10")]] = clustered["z", "Pr(>|t|)"]
}
model1 = lm(as.formula(paste0(var_list2[3], "~", paste(covars[c(1, 3:52)], collapse = " + "))), data = df)
df$z = residuals(model1)
var = var_list0[3]
model2 = lm(as.formula(paste(var, "~", paste(covars[c(1, 3:52)], collapse = " + "))),
data = df)
df$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "10")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "10")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "10")]] = clustered["z", "Pr(>|t|)"]
model1 = lm(as.formula(paste0(var_list2[3], "~", paste(covars[2:52], collapse = " + "))), data = df)
df$z = residuals(model1)
var = var_list0[4]
model2 = lm(as.formula(paste(var, "~", paste(covars[2:52], collapse = " + "))),
data = df)
df$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "10")]] = (clustered["z", "Estimate"])*100
se_list[[paste0(var, "10")]] = (clustered["z", "Std. Error"])*100
p_value_list[[paste0(var, "10")]] = clustered["z", "Pr(>|t|)"]
# Column 11
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(covars[3:79], collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
for (j in 1:length(var_list0[1:2])) {
var = var_list0[j]
model2 = lm(as.formula(paste(var, "~", paste(covars[3:79], collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "11")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "11")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "11")]] = clustered["z", "Pr(>|t|)"]
}
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(covars[c(1, 3:79)], collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[3]
model2 = lm(as.formula(paste(var, "~", paste(covars[c(1, 3:79)], collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "11")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "11")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "11")]] = clustered["z", "Pr(>|t|)"]
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(covars[2:79], collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
var = var_list0[4]
model2 = lm(as.formula(paste(var, "~", paste(covars[2:79], collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "11")]] = (clustered["z", "Estimate"])*100
se_list[[paste0(var, "11")]] = (clustered["z", "Std. Error"])*100
p_value_list[[paste0(var, "11")]] = clustered["z", "Pr(>|t|)"]
# Correlation matrix
cor_matrix = cor(df_state %>% filter(year == 1998) %>% select(inst, all_of(control_list[1:7])), use = "complete.obs")
corr = cor_matrix[2:8]
# Constructing table
output_table = matrix("", nrow = 18, ncol = 12)
# Fill the first column with variable names, "bandwidth", and "obs"
output_table[seq(1, length(var_list0)*3, 3), 1] = var_list0
for (i in 1:11) {
for (j in 1:length(var_list0)) {
var = var_list0[j]
output_table[3*j - 2, i+1] = sprintf("%.3f", coef_list[[paste0(var, i)]])
output_table[3*j - 1, i+1] = sprintf("(%.3f)", se_list[[paste0(var, i)]])
output_table[3*j, i+1] = sprintf("(%.3f)", p_value_list[[paste0(var, i)]])
}
}
output_table[13, 1:12] = c("GDP, Gini, Poverty, Pop.", "Yes", "—", "—", "—", "—", "—", "—", "—", "—", "—", "—")
output_table[14, 1:12] = c("Time-Dummies Interac. w/", "—", "GDP", "Gini", " Illit.", "Poverty", "Pop.", "Area", "#Munic.", "Pop. & Area", "—", "—")
output_table[15, 1:12] = c("[Correlation of Var. w/ Si]", "—", round(corr, 3), "Pop. & Area", "—", "—")
output_table[16, 1:12] = c("Restricted Sample", "—", "—", "—", "—", "—", "—", "—", "—", "—", "Yes", "—")
output_table[17, 1:12] = c("State-Specific Trends", "—", "—", "—", "—", "—", "—", "—", "—", "—", "—", "Yes")
output_table[18, 1:12] = c("N", 81, 81, 81, 81, 81, 81, 81, 81, 81, 69, 81)
# Convert to data frame for stargazer output
output_df = as.data.frame(output_table)
colnames(output_df) = c("", "(1)", "(2)", "(3)", "(4)", "(5)", "(6)", "(7)", "(8)", "(9)", "(10)", "(11)")
# Display the table with stargazer
stargazer(
output_df,
type = "text",
summary = FALSE,
title = "Table VI",
rownames = FALSE
)
# Figure 2 - scatter plots with quadratic fits
plot_main1 = ggplot(munic %>% filter(voters96 < 100000, voters96 > 4500), aes(x = bin_voters96)) +
geom_point(aes(y = bin_util94, x = bin_voters96 - 4000), shape = 15, size = 2.5, color = "green") +
geom_point(aes(y = bin_util98, x = bin_voters96 - 4000), shape = 16, size = 2.5, color = "blue") +
geom_point(aes(y = bin_util02, x = bin_voters96 - 4000), shape = 17, size = 2.5, color = "red") +
stat_smooth(aes(x = voters96, y = r_util94), method = "lm", formula = y ~ poly(x, 2), se = FALSE, color = "green", data = munic %>% filter(voters96 < 40500, voters96 > 5000)) +
stat_smooth(aes(x = voters96, y = r_util94), method = "lm", formula = y ~ poly(x, 2), se = FALSE, color = "green", data = munic %>% filter(voters96 < 100000, voters96 > 40500)) +
stat_smooth(aes(x = voters96, y = r_util02), method = "lm", formula = y ~ poly(x, 2), se = FALSE, color = "red", data = munic %>% filter(voters96 < 40500, voters96 > 5000)) +
stat_smooth(aes(x = voters96, y = r_util02), method = "lm", formula = y ~ poly(x, 2), se = FALSE, color = "red", data = munic %>% filter(voters96 < 100000, voters96 > 40500)) +
stat_smooth(aes(x = voters96, y = r_util98), method = "lm", formula = y ~ poly(x, 2), se = FALSE, color = "blue", data = munic %>% filter(voters96 < 40500, voters96 > 5000)) +
stat_smooth(aes(x = voters96, y = r_util98), method = "lm", formula = y ~ poly(x, 2), se = FALSE, color = "blue", data = munic %>% filter(voters96 < 100000, voters96 > 40500)) +
geom_vline(xintercept = 40500, color = "#cc345c") +
labs(y = "", x = "Number of Registered Voters - 1996") +
theme_minimal_hgrid() +
scale_x_continuous(limits = c(0, 100000), breaks = seq(0, 100000, by = 20000), labels = number_format(accuracy = 1, big.mark = "")) +
scale_y_continuous(breaks = seq(0.6, 1, by = 0.1))
legend_plot1 = get_legend(
ggplot(munic, aes(x = bin_voters96)) +
geom_point(aes(y = bin_util94, color = "Valid Votes/Turnout - 1994 Election (Paper Only)"), shape = 15, size = 2.5) +
geom_point(aes(y = bin_util98, color = "Valid Votes/Turnout - 1998 Election (Discontinuity)"), shape = 16, size = 2.5) +
geom_point(aes(y = bin_util02, color = "Valid Votes/Turnout - 2002 Election (Electronic Only)"), shape = 17, size = 2.5) +
scale_color_manual(values = c("green", "blue", "red")) +
guides(color = guide_legend(title = NULL)) +
theme_void() +
theme(
legend.background = element_rect(color = "black",  # Cor da borda do retângulo
fill = NA)        # Sem preenchimento (transparente)
)
)
final_plot1 = plot_grid(plot_main1, legend_plot1, ncol = 1, rel_heights = c(1, 0.2))
# Figure 3 - similar approach for bin_regist and bin_attend
plot_main2 = ggplot(munic %>% filter(voters96 < 100000, voters96 > 4500), aes(x = bin_voters96)) +
geom_point(aes(y = bin_regist, x = bin_voters96 - 4000), shape = 16, size = 2.5, color = "green") +
geom_point(aes(y = bin_attend, x = bin_voters96 - 4000), shape = 17, size = 2.5, color = "blue") +
stat_smooth(aes(x = voters96, y = regist), method = "lm", formula = y ~ poly(x, 2), se = FALSE, color = "green", data = munic %>% filter(voters96 < 40500, voters96 > 5000)) +
stat_smooth(aes(x = voters96, y = regist), method = "lm", formula = y ~ poly(x, 2), se = FALSE, color = "green", data = munic %>% filter(voters96 < 100000, voters96 > 40500)) +
stat_smooth(aes(x = voters96, y = attend), method = "lm", formula = y ~ poly(x, 2), se = FALSE, color = "blue", data = munic %>% filter(voters96 < 40500, voters96 > 5000)) +
stat_smooth(aes(x = voters96, y = attend), method = "lm", formula = y ~ poly(x, 2), se = FALSE, color = "blue", data = munic %>% filter(voters96 < 100000, voters96 > 40500)) +
geom_vline(xintercept = 40500, color = "#cc345c") +
labs(y = "", x = "Number of Registered Voters - 1996") +
theme_minimal_hgrid() +
scale_x_continuous(breaks = seq(0, 100000, by = 20000), labels = number_format(accuracy = 1, big.mark = "")) +
scale_y_continuous(limits = c(0.525, 1), breaks = seq(0.6, 1, by = 0.1))
legend_plot2 = get_legend(
ggplot(munic, aes(x = bin_voters96)) +
geom_point(aes(y = bin_regist, color = "Registered Voters/Total Population"), shape = 16, size = 2.5) +
geom_point(aes(y = bin_attend, color = "Turnout/Registered Voters"), shape = 17, size = 2.5) +
scale_color_manual(values = c("green", "blue")) +
guides(color = guide_legend(title = NULL)) +
theme_void() +
theme(
legend.background = element_rect(color = "black",  # Cor da borda do retângulo
fill = NA)        # Sem preenchimento (transparente)
)
)
final_plot2 = plot_grid(plot_main2, legend_plot2, ncol = 1, rel_heights = c(1, 0.2))
# Figure 2
final_plot1
# Figure 3
final_plot2
# Importing and cleaning df's
data = read.dta(here("replication_project/data", "brdb.dta")) %>%
filter(ADMIN_NAME != "Litigated Zone") %>%
mutate(inst_c = ifelse(ADMIN_NAME == "Acre", 0.4481768,
ifelse(ADMIN_NAME == "Alagoas", 0.0718791,
ifelse(ADMIN_NAME == "Amazonas", 0.5444938,
ifelse(ADMIN_NAME == "Amapa", 0.5981804,
ifelse(ADMIN_NAME == "Bahia", 0.3632319,
ifelse(ADMIN_NAME == "Ceara", 0.4165474,
ifelse(ADMIN_NAME == "Distrito Federal", 1,
ifelse(ADMIN_NAME == "Espirito Santo", 0.5625693,
ifelse(ADMIN_NAME == "Goias", 0.3886635,
ifelse(ADMIN_NAME == "Maranhao", 0.2972295,
ifelse(ADMIN_NAME == "Minas Gerais", 0.4609004,
ifelse(ADMIN_NAME == "Mato Grosso do Sul", 0.4614621,
ifelse(ADMIN_NAME == "Mato Grosso", 0.3511314,
ifelse(ADMIN_NAME == "Para", 0.4281587,
ifelse(ADMIN_NAME == "Paraiba", 0.2953183,
ifelse(ADMIN_NAME == "Pernambuco", 0.4842924,
ifelse(ADMIN_NAME == "Piaui", 0.2258026,
ifelse(ADMIN_NAME == "Parana", 0.4492917,
ifelse(ADMIN_NAME == "Rio de Janeiro", 0.8993561,
ifelse(ADMIN_NAME == "Rio Grande do Norte", 0.3123622,
ifelse(ADMIN_NAME == "Rondonia", 0.3648933,
ifelse(ADMIN_NAME == "Roraima", 0.6315905,
ifelse(ADMIN_NAME == "Rio Grande do Sul", 0.5240926,
ifelse(ADMIN_NAME == "Santa Catarina", 0.3744836,
ifelse(ADMIN_NAME == "Sergipe", 0.3345228,
ifelse(ADMIN_NAME == "Sao Paulo", 0.7631133,
ifelse(ADMIN_NAME == "Tocantins", 0.1472582, NA))))))))))))))))))))))))))),
inst_c = ifelse(ADMIN_NAME %in% c("Alagoas", "Rio de Janeiro", "Amapa", "Roraima"),
1,
inst_c))
state_df = read_state(year = 2000) %>%
mutate(name_state = stri_trans_general(name_state, "Latin-ASCII"),
name_state = ifelse(str_detect(name_state, "Do"),
str_replace_all(name_state, "Do", "do"),
ifelse(str_detect(name_state, "De"),
str_replace(name_state, "De", "de"),
name_state)))
state_coord = left_join(state_df, data, by = c("name_state" = "ADMIN_NAME"))
ev_coord = read_dta(here("replication_project/data", "ev_coord.dta"))
ev_sf = ev_coord %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326, remove = F)
no_axis = theme(axis.title=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
ggplot() +
geom_sf(data = state_coord, aes(fill=inst_c), color= "black", size=.15) +
labs(subtitle="Share of electorate using electronic voting: 1998 election", size=8) +
scale_fill_distiller(name="", limits = c(0.1, 1), direction = 1, na.value = "white") +
#scale_fill_manual(values = c("teste" = "red")) +
theme_minimal() +
no_axis +
geom_sf(data = ev_sf, aes(geometry = geometry)) +
geom_point(data = ev_sf, aes(x = longitude, y = latitude, colour = "#c80434"), size = 0.5,
show.legend = F,
stroke = 1, fill = NA) +
scale_color_manual(values = "#c80434")
