seq(1, 9, by = 2)
seq(1, length(var_list1)*3, 5)
seq(1, length(var_list1)*3, 3)
# Fill the first column with variable names, "bandwidth", and "obs"
output_table[seq(1, length(var_list1)*3, 3), 1] = var_list1
View(output_table)
3*1-(1-1)
3*1-(2-1)
3*1-(3-1)
3*2-(3-2)
1 + 3*(1)
3 + 3*(1)
3 - 3*(1)
4 - 3*(1)
4 - 3*(2)
3*2 - 2
3*3 - 2
3*4 - 2
3*1 - 2
3*1 - 1
3*2 - 1
3*3 - 1
3*4 - 1
3*5 - 1
View(mean_sd_list)
var_list1 = c("d_util_rate", "d_right", "d_ag_ltotal", "d_ag_ssaude", "d_ag_lsaude")
var_list2 = c("d_inst98e", "d_inst02e", "inst", "rest_inst")
mean_sd_list = list()
# Calculate mean and standard deviation for the variable
for (var in var_list1) {
mean_val = mean(df_state[[var]], na.rm = TRUE)
sd_val = sd(df_state[[var]], na.rm = TRUE)
mean_sd_list[[var]] = c(mean_val, sd_val)
}
sprintf("%.3f", coef_list[[paste0(var_list1[1], "98")]])
sprintf("%.3f", coef_list[[paste0(var_list1[1], "98")]])-sprintf("%.3f", coef_list[[paste0(var_list1[1], "02")]])
lc_list = list()
View(coef_list)
coef_list$d_util_rate98
coef_list[[var_list1[1]]]
colnames(coef_list)
coef_list
lc_list[["d_util_rate_diff"]] = (coef_list$d_util_rate98 - coef_list$d_util_rate02)/2
View(lc_list)
lc_list[["d_right_diff"]] = (coef_list$d_right98 - coef_list$d_right02)/2
lc_list[["d_ag_ltotal_diff"]] = (coef_list$d_ag_ltotal98 - coef_list$d_ag_ltotal02)/2
lc_list[["d_ag_ssaude_diff"]] = (coef_list$d_ag_ssaude98 - coef_list$d_ag_ssaude98)/2
lc_list[["d_ag_lsaude_diff"]] = (coef_list$d_ag_lsaude98 - coef_list$d_ag_lsaude98)/2
lc_list[["d_util_rate_sum"]] = (coef_list$d_util_rate98 + coef_list$d_util_rate02)/2
lc_list[["d_right_sum"]] = (coef_list$d_right98 + coef_list$d_right02)/2
lc_list[["d_ag_ltotal_sum"]] = (coef_list$d_ag_ltotal98 + coef_list$d_ag_ltotal02)/2
lc_list[["d_ag_ltotal_sum"]] = (coef_list$d_ag_ltotal98 + coef_list$d_ag_ltotal02)/2
lc_list[["d_ag_ssaude_sum"]] = (coef_list$d_ag_ssaude98 + coef_list$d_ag_ssaude98)/2
lc_list[["d_ag_lsaude_sum"]] = (coef_list$d_ag_lsaude98 + coef_list$d_ag_lsaude98)/2
View(lc_list)
coef_list$d_ag_ssaude98
coef_list$d_ag_lsaude98
coef_list$d_ag_lsaude98 - coef_list$d_ag_lsaude98
lc_list[["d_util_rate_diff"]] = (coef_list$d_util_rate98 - coef_list$d_util_rate02)/2
lc_list[["d_right_diff"]] = (coef_list$d_right98 - coef_list$d_right02)/2
lc_list[["d_ag_ltotal_diff"]] = (coef_list$d_ag_ltotal98 - coef_list$d_ag_ltotal02)/2
lc_list[["d_ag_ssaude_diff"]] = (coef_list$d_ag_ssaude98 - coef_list$d_ag_ssaude02)/2
lc_list[["d_ag_lsaude_diff"]] = (coef_list$d_ag_lsaude98 - coef_list$d_ag_lsaude02)/2
lc_list[["d_util_rate_sum"]] = (coef_list$d_util_rate98 + coef_list$d_util_rate02)/2
lc_list[["d_right_sum"]] = (coef_list$d_right98 + coef_list$d_right02)/2
lc_list[["d_ag_ltotal_sum"]] = (coef_list$d_ag_ltotal98 + coef_list$d_ag_ltotal02)/2
lc_list[["d_ag_ssaude_sum"]] = (coef_list$d_ag_ssaude98 + coef_list$d_ag_ssaude02)/2
lc_list[["d_ag_lsaude_sum"]] = (coef_list$d_ag_lsaude98 + coef_list$d_ag_lsaude02)/2
for (j in 1:length(var_list1)) {
var = var_list1[j]
# Fill coefficients and robust standard errors for each specification
output_table[3*j - 2, 3] = sprintf("%.3f", coef_list[[paste0(var, "98")]])
output_table[3*j - 1, 3] = sprintf("(%.3f)", se_list[[paste0(var, "98")]])
output_table[3*j, 3] = sprintf("(%.3f)", p_value_list[[paste0(var, "98")]])
output_table[3*j - 2, 4] = sprintf("%.3f", coef_list[[paste0(var, "02")]])
output_table[3*j - 1, 4] = sprintf("(%.3f)", se_list[[paste0(var, "02")]])
output_table[3*j, 4] = sprintf("(%.3f)", p_value_list[[paste0(var, "02")]])
# Fill mean and standard deviation
output_table[3*j - 2, 2] = sprintf("%.3f", mean_sd_list[[var]][1])
output_table[3*j - 1, 2] = sprintf("(%.3f)", mean_sd_list[[var]][2])
# Fill linear combinations
output_table[3*j - 2, 5] = sprintf("%.3f", lc_list[[paste0(var, "_diff")]])
output_table[3*j - 2, 6] = sprintf("%.3f", lc_list[[paste0(var, "_sum")]])
}
# Calculate means and standard deviations for each variable
coef_list = list()
se_list = list()
p_value_list = list()
# Filter data for the specified year
data_filtered = df_state %>%
filter(year == 1998)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[1], "~", paste0(covars, collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
for (i in 1:length(var_list1)) {
var = var_list1[i]
model2 = lm(as.formula(paste(var, "~", paste(covars, collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "98")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "98")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "98")]] = clustered["z", "Pr(>|t|)"]
}
data_filtered = df_state %>%
filter(year == 2002)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[2], "~", paste0(covars, collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
for (i in 1:length(var_list1)) {
var = var_list1[i]
model2 = lm(as.formula(paste(var, "~", paste(covars, collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "02")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "02")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "02")]] = clustered["z", "Pr(>|t|)"]
}
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(covars, collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
for (i in 1:length(var_list1)) {
var = var_list1[i]
model2 = lm(as.formula(paste(var, "~", paste(covars, collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "diff")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "diff")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "diff")]] = clustered["z", "Pr(>|t|)"]
}
covars
covars[1:21]
covars[1:20]
covars = colnames(df_state %>%
select(starts_with("reg") | starts_with("delec") | starts_with("duf")))
coef_list = list()
se_list = list()
p_value_list = list()
# Filter data for the specified year
data_filtered = df_state %>%
filter(year == 1998)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[1], "~", paste0(covars[1:23], collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
for (i in 1:length(var_list1)) {
var = var_list1[i]
model2 = lm(as.formula(paste(var, "~", paste(covars[1:23], collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "98")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "98")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "98")]] = clustered["z", "Pr(>|t|)"]
}
data_filtered = df_state %>%
filter(year == 2002)
View(coef_list)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[2], "~", paste0(covars[1:23], collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
for (i in 1:length(var_list1)) {
var = var_list1[i]
model2 = lm(as.formula(paste(var, "~", paste(covars[1:23], collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "02")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "02")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "02")]] = clustered["z", "Pr(>|t|)"]
}
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(covars, collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
model1
View(df_state)
var_list0 = c("util_rate", "right", "ag_ltotal", "ag_ssaude", "ag_lsaude")
for (i in 1:length(var_list0)) {
var = var_list0[i]
model2 = lm(as.formula(paste(var, "~", paste(covars, collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "diff")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "diff")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "diff")]] = clustered["z", "Pr(>|t|)"]
}
View(coef_list)
# Calculate means and standard deviations for each variable
coef_list = list()
se_list = list()
p_value_list = list()
mean_sd_list = list()
lc_list = list()
# Calculate mean and standard deviation for the variable
for (var in var_list1) {
mean_val = mean(df_state[[var]], na.rm = TRUE)
sd_val = sd(df_state[[var]], na.rm = TRUE)
mean_sd_list[[var]] = c(mean_val, sd_val)
}
covars = colnames(df_state %>%
select(starts_with("reg") | starts_with("delec") | starts_with("duf")))
# Filter data for the specified year
data_filtered = df_state %>%
filter(year == 1998)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[1], "~", paste0(covars[1:23], collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
for (i in 1:length(var_list1)) {
var = var_list1[i]
model2 = lm(as.formula(paste(var, "~", paste(covars[1:23], collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "98")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "98")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "98")]] = clustered["z", "Pr(>|t|)"]
}
data_filtered = df_state %>%
filter(year == 2002)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[2], "~", paste0(covars[1:23], collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
for (i in 1:length(var_list1)) {
var = var_list1[i]
model2 = lm(as.formula(paste(var, "~", paste(covars[1:23], collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "02")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "02")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "02")]] = clustered["z", "Pr(>|t|)"]
}
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(covars, collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
for (i in 1:length(var_list0)) {
var = var_list0[i]
model2 = lm(as.formula(paste(var, "~", paste(covars, collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "_diff")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "_diff")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "_diff")]] = clustered["z", "Pr(>|t|)"]
}
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[4], "~", paste0(covars, collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
for (i in 1:length(var_list0)) {
var = var_list0[i]
model2 = lm(as.formula(paste(var, "~", paste(covars, collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "_sum")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "_sum")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "_sum")]] = clustered["z", "Pr(>|t|)"]
}
var_list2[4]
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[4], "~", paste0(covars, collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
for (i in 1:length(var_list0)) {
var = var_list0[i]
model2 = lm(as.formula(paste(var, "~", paste(covars, collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "_sum")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "_sum")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "_sum")]] = clustered["z", "Pr(>|t|)"]
}
# Create a matrix to display in stargazer
output_table = matrix("", nrow = 15, ncol = 6)
# Create a matrix to display in stargazer
output_table = matrix("", nrow = 15, ncol = 6)
# Fill the first column with variable names, "bandwidth", and "obs"
output_table[seq(1, length(var_list1)*3, 3), 1] = var_list1
View(output_table)
for (j in 1:length(var_list1)) {
var = var_list1[j]
# Fill coefficients and robust standard errors for each specification
output_table[3*j - 2, 3] = sprintf("%.3f", coef_list[[paste0(var, "98")]])
output_table[3*j - 1, 3] = sprintf("(%.3f)", se_list[[paste0(var, "98")]])
output_table[3*j, 3] = sprintf("(%.3f)", p_value_list[[paste0(var, "98")]])
output_table[3*j - 2, 4] = sprintf("%.3f", coef_list[[paste0(var, "02")]])
output_table[3*j - 1, 4] = sprintf("(%.3f)", se_list[[paste0(var, "02")]])
output_table[3*j, 4] = sprintf("(%.3f)", p_value_list[[paste0(var, "02")]])
# Fill linear combinations
output_table[3*j - 2, 5] = sprintf("%.3f", coef_list[[paste0(var, "_diff")]])
output_table[3*j - 1, 5] = sprintf("(%.3f)", se_list[[paste0(var, "_diff")]])
output_table[3*j, 5] = sprintf("(%.3f)", p_value_list[[paste0(var, "_diff")]])
output_table[3*j - 2, 6] = sprintf("%.3f", coef_list[[paste0(var, "_sum")]])
output_table[3*j - 1, 6] = sprintf("(%.3f)", se_list[[paste0(var, "_sum")]])
output_table[3*j, 6] = sprintf("(%.3f)", p_value_list[[paste0(var, "_sum")]])
# Fill mean and standard deviation
output_table[3*j - 2, 2] = sprintf("%.3f", mean_sd_list[[var]][1])
output_table[3*j - 1, 2] = sprintf("(%.3f)", mean_sd_list[[var]][2])
}
View(p_value_list)
for (j in 1:length(var_list1)) {
var = var_list1[j]
var2 = var_list0[j]
# Fill coefficients and robust standard errors for each specification
output_table[3*j - 2, 3] = sprintf("%.3f", coef_list[[paste0(var, "98")]])
output_table[3*j - 1, 3] = sprintf("(%.3f)", se_list[[paste0(var, "98")]])
output_table[3*j, 3] = sprintf("(%.3f)", p_value_list[[paste0(var, "98")]])
output_table[3*j - 2, 4] = sprintf("%.3f", coef_list[[paste0(var, "02")]])
output_table[3*j - 1, 4] = sprintf("(%.3f)", se_list[[paste0(var, "02")]])
output_table[3*j, 4] = sprintf("(%.3f)", p_value_list[[paste0(var, "02")]])
# Fill linear combinations
output_table[3*j - 2, 5] = sprintf("%.3f", coef_list[[paste0(var2, "_diff")]])
output_table[3*j - 1, 5] = sprintf("(%.3f)", se_list[[paste0(var2, "_diff")]])
output_table[3*j, 5] = sprintf("(%.3f)", p_value_list[[paste0(var2, "_diff")]])
output_table[3*j - 2, 6] = sprintf("%.3f", coef_list[[paste0(var2, "_sum")]])
output_table[3*j - 1, 6] = sprintf("(%.3f)", se_list[[paste0(var2, "_sum")]])
output_table[3*j, 6] = sprintf("(%.3f)", p_value_list[[paste0(var2, "_sum")]])
# Fill mean and standard deviation
output_table[3*j - 2, 2] = sprintf("%.3f", mean_sd_list[[var]][1])
output_table[3*j - 1, 2] = sprintf("(%.3f)", mean_sd_list[[var]][2])
}
# Convert to data frame for stargazer output
output_df = as.data.frame(output_table)
colnames(output_df) = c("", "Sample Avg.", "Paper-Disc.", "Disc.-Electr.", "Linear Comb. 1", "Linear Comb. 2")
# Display the table with stargazer
stargazer(
output_df,
type = "text",
summary = FALSE,
title = "Table II - Panel C",
rownames = FALSE
)
mean_sd_list
# Calculate mean and standard deviation for the variable
for (var in var_list0) {
mean_val = mean(df_state[[var]], na.rm = TRUE)
sd_val = sd(df_state[[var]], na.rm = TRUE)
mean_sd_list[[var]] = c(mean_val, sd_val)
}
View(mean_sd_list)
mean_sd_list = list()
# Calculate mean and standard deviation for the variable
for (var in var_list0) {
mean_val = mean(df_state[[var]], na.rm = TRUE)
sd_val = sd(df_state[[var]], na.rm = TRUE)
mean_sd_list[[var]] = c(mean_val, sd_val)
}
df_state = df_state %>%
# Generate d_inst and l_inst
mutate(d_inst = c(NA, diff(inst)),
l_inst = lag(inst),
l_inst = ifelse(d_inst < 0, NA, l_inst),
d_inst = ifelse(d_inst < 0, NA, d_inst),
rest_inst = inst,
d_inst98e = c(NA, diff(inst98e)),
d_inst02e = c(NA, diff(inst02e)),
d_util_rate = c(NA, diff(util_rate)),
d_right = c(NA, diff(right)),
d_ag_ltotal = c(NA, diff(ag_ltotal)),
d_ag_ssaude = c(NA, diff(ag_ssaude)),
d_ag_lsaude = c(NA, diff(ag_lsaude))
) %>%
# Replace rest_inst for the year 2002
mutate(rest_inst = ifelse(year == 2002, (l_inst - d_inst), rest_inst))
var_list0 = c("util_rate", "right", "ag_ltotal", "ag_ssaude", "ag_lsaude")
var_list1 = c("d_util_rate", "d_right", "d_ag_ltotal", "d_ag_ssaude", "d_ag_lsaude")
var_list2 = c("d_inst98e", "d_inst02e", "inst", "rest_inst")
# Calculate means and standard deviations for each variable
coef_list = list()
se_list = list()
p_value_list = list()
mean_sd_list = list()
lc_list = list()
# Calculate mean and standard deviation for the variable
for (var in var_list0) {
mean_val = mean(df_state[[var]], na.rm = TRUE)
sd_val = sd(df_state[[var]], na.rm = TRUE)
mean_sd_list[[var]] = c(mean_val, sd_val)
}
covars = colnames(df_state %>%
select(starts_with("reg") | starts_with("delec") | starts_with("duf")))
# Filter data for the specified year
data_filtered = df_state %>%
filter(year == 1998)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[1], "~", paste0(covars[1:23], collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
for (i in 1:length(var_list1)) {
var = var_list1[i]
model2 = lm(as.formula(paste(var, "~", paste(covars[1:23], collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "98")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "98")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "98")]] = clustered["z", "Pr(>|t|)"]
}
data_filtered = df_state %>%
filter(year == 2002)
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[2], "~", paste0(covars[1:23], collapse = " + "))), data = data_filtered)
data_filtered$z = residuals(model1)
for (i in 1:length(var_list1)) {
var = var_list1[i]
model2 = lm(as.formula(paste(var, "~", paste(covars[1:23], collapse = " + "))),
data = data_filtered)
data_filtered$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = data_filtered)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "02")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "02")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "02")]] = clustered["z", "Pr(>|t|)"]
}
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[3], "~", paste0(covars, collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
for (i in 1:length(var_list0)) {
var = var_list0[i]
model2 = lm(as.formula(paste(var, "~", paste(covars, collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "_diff")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "_diff")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "_diff")]] = clustered["z", "Pr(>|t|)"]
}
# Fit regression model with the specified dependent variable and predictors
model1 = lm(as.formula(paste0(var_list2[4], "~", paste0(covars, collapse = " + "))), data = df_state)
df_state$z = residuals(model1)
for (i in 1:length(var_list0)) {
var = var_list0[i]
model2 = lm(as.formula(paste(var, "~", paste(covars, collapse = " + "))),
data = df_state)
df_state$y_z = residuals(model2)
model3 = lm(y_z ~ z, data = df_state)
clustered = coeftest(model3, vcov = vcovCL, cluster = ~ uf)
coef_list[[paste0(var, "_sum")]] = clustered["z", "Estimate"]
se_list[[paste0(var, "_sum")]] = clustered["z", "Std. Error"]
p_value_list[[paste0(var, "_sum")]] = clustered["z", "Pr(>|t|)"]
}
# Create a matrix to display in stargazer
output_table = matrix("", nrow = 15, ncol = 6)
# Fill the first column with variable names, "bandwidth", and "obs"
output_table[seq(1, length(var_list1)*3, 3), 1] = var_list1
for (j in 1:length(var_list1)) {
var = var_list1[j]
var2 = var_list0[j]
# Fill coefficients and robust standard errors for each specification
output_table[3*j - 2, 3] = sprintf("%.3f", coef_list[[paste0(var, "98")]])
output_table[3*j - 1, 3] = sprintf("(%.3f)", se_list[[paste0(var, "98")]])
output_table[3*j, 3] = sprintf("(%.3f)", p_value_list[[paste0(var, "98")]])
output_table[3*j - 2, 4] = sprintf("%.3f", coef_list[[paste0(var, "02")]])
output_table[3*j - 1, 4] = sprintf("(%.3f)", se_list[[paste0(var, "02")]])
output_table[3*j, 4] = sprintf("(%.3f)", p_value_list[[paste0(var, "02")]])
# Fill linear combinations
output_table[3*j - 2, 5] = sprintf("%.3f", coef_list[[paste0(var2, "_diff")]])
output_table[3*j - 1, 5] = sprintf("(%.3f)", se_list[[paste0(var2, "_diff")]])
output_table[3*j, 5] = sprintf("(%.3f)", p_value_list[[paste0(var2, "_diff")]])
output_table[3*j - 2, 6] = sprintf("%.3f", coef_list[[paste0(var2, "_sum")]])
output_table[3*j - 1, 6] = sprintf("(%.3f)", se_list[[paste0(var2, "_sum")]])
output_table[3*j, 6] = sprintf("(%.3f)", p_value_list[[paste0(var2, "_sum")]])
# Fill mean and standard deviation
output_table[3*j - 2, 2] = sprintf("%.3f", mean_sd_list[[var]][1])
output_table[3*j - 1, 2] = sprintf("(%.3f)", mean_sd_list[[var]][2])
}
for (j in 1:length(var_list1)) {
var = var_list1[j]
var2 = var_list0[j]
# Fill coefficients and robust standard errors for each specification
output_table[3*j - 2, 3] = sprintf("%.3f", coef_list[[paste0(var, "98")]])
output_table[3*j - 1, 3] = sprintf("(%.3f)", se_list[[paste0(var, "98")]])
output_table[3*j, 3] = sprintf("(%.3f)", p_value_list[[paste0(var, "98")]])
output_table[3*j - 2, 4] = sprintf("%.3f", coef_list[[paste0(var, "02")]])
output_table[3*j - 1, 4] = sprintf("(%.3f)", se_list[[paste0(var, "02")]])
output_table[3*j, 4] = sprintf("(%.3f)", p_value_list[[paste0(var, "02")]])
# Fill linear combinations
output_table[3*j - 2, 5] = sprintf("%.3f", coef_list[[paste0(var2, "_diff")]])
output_table[3*j - 1, 5] = sprintf("(%.3f)", se_list[[paste0(var2, "_diff")]])
output_table[3*j, 5] = sprintf("(%.3f)", p_value_list[[paste0(var2, "_diff")]])
output_table[3*j - 2, 6] = sprintf("%.3f", coef_list[[paste0(var2, "_sum")]])
output_table[3*j - 1, 6] = sprintf("(%.3f)", se_list[[paste0(var2, "_sum")]])
output_table[3*j, 6] = sprintf("(%.3f)", p_value_list[[paste0(var2, "_sum")]])
# Fill mean and standard deviation
output_table[3*j - 2, 2] = sprintf("%.3f", mean_sd_list[[var2]][1])
output_table[3*j - 1, 2] = sprintf("(%.3f)", mean_sd_list[[var2]][2])
}
# Convert to data frame for stargazer output
output_df = as.data.frame(output_table)
colnames(output_df) = c("", "Sample Avg.", "Paper-Disc.", "Disc.-Electr.", "Linear Comb. 1", "Linear Comb. 2")
# Display the table with stargazer
stargazer(
output_df,
type = "text",
summary = FALSE,
title = "Table II - Panel C",
rownames = FALSE
)
