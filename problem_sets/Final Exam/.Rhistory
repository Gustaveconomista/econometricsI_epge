beta1 = sapply(ppe$yycali_97_centered/bw_silverman, epanechnikov_kernel)
# Define relevant variables
X <- data$yycali_97  # Running variable
Y_post <- data$y_post  # Outcome after implementation
cutoff <- data$cut  # Cutoff points
# Define the Epanechnikov kernel function
epanechnikov_kernel <- function(u) {
0.75 * (1 - u^2) * (abs(u) <= 1)
}
# Corrected Silverman bandwidth estimator
silverman_bandwidth <- function(X) {
n <- length(X)
h <- 1.06 * min(sd(X), IQR(X) / 1.34) * n^(-1/5)
return(h)
}
# Estimate coefficients for Treat = 1 and Treat = 0
local_linear_regression <- function(X, Y, cutoff, h, treat) {
# Filter X and Y for the group of interest
X_treat <- X[treat == 1]
Y_treat <- Y[treat == 1]
# Create design matrix
X_tilde <- cbind(1, X_treat - cutoff)
# Kernel weights
weights <- epanechnikov_kernel((X_treat - cutoff) / h)
# Weighted matrix
W <- diag(weights)
# Weighted regression
beta <- solve(t(X_tilde) %*% W %*% X_tilde) %*% (t(X_tilde) %*% W %*% Y_treat)
return(beta)
}
# Calculate beta_RDD
estimate_beta_rdd <- function(X, Y, cutoff, treat) {
h <- silverman_bandwidth(X)
# Estimates for Treat = 1 and Treat = 0
beta_1 <- local_linear_regression(X, Y, cutoff, h, treat = (X <= cutoff))
beta_0 <- local_linear_regression(X, Y, cutoff, h, treat = (X > cutoff))
# First element of the difference
beta_rdd <- beta_1[1] - beta_0[1]
return(beta_rdd)
}
# Apply the function to estimate beta_RDD
beta_rdd <- estimate_beta_rdd(X, Y_post, cutoff, data$Treat)
# Define relevant variables
X <- ppe$yycali_97  # Running variable
Y_post <- ppe$y_post  # Outcome after implementation
cutoff <- ppe$cut  # Cutoff points
# Define the Epanechnikov kernel function
epanechnikov_kernel <- function(u) {
0.75 * (1 - u^2) * (abs(u) <= 1)
}
# Corrected Silverman bandwidth estimator
silverman_bandwidth <- function(X) {
n <- length(X)
h <- 1.06 * min(sd(X), IQR(X) / 1.34) * n^(-1/5)
return(h)
}
# Estimate coefficients for Treat = 1 and Treat = 0
local_linear_regression <- function(X, Y, cutoff, h, treat) {
# Filter X and Y for the group of interest
X_treat <- X[treat == 1]
Y_treat <- Y[treat == 1]
# Create design matrix
X_tilde <- cbind(1, X_treat - cutoff)
# Kernel weights
weights <- epanechnikov_kernel((X_treat - cutoff) / h)
# Weighted matrix
W <- diag(weights)
# Weighted regression
beta <- solve(t(X_tilde) %*% W %*% X_tilde) %*% (t(X_tilde) %*% W %*% Y_treat)
return(beta)
}
# Calculate beta_RDD
estimate_beta_rdd <- function(X, Y, cutoff, treat) {
h <- silverman_bandwidth(X)
# Estimates for Treat = 1 and Treat = 0
beta_1 <- local_linear_regression(X, Y, cutoff, h, treat = (X <= cutoff))
beta_0 <- local_linear_regression(X, Y, cutoff, h, treat = (X > cutoff))
# First element of the difference
beta_rdd <- beta_1[1] - beta_0[1]
return(beta_rdd)
}
# Apply the function to estimate beta_RDD
beta_rdd <- estimate_beta_rdd(X, Y_post, cutoff, ppe$Treat)
silverman_bandwidth(ppe$yycali_97)
# Corrected Silverman bandwidth estimator
silverman_bandwidth <- function(X) {
n <- length(X)
h <- 0.9 * min(sd(X), IQR(X) / 1.34) * n^(-1/5)
return(h)
}
silverman_bandwidth(ppe$yycali_97)
bw_silverman = silverman_bandwidth(ppe$yycali_97)
rm(silverman_bw())
rm(silverman_bw
)
rm(silverman_bw)
# Defining variables
X = ppe %>%
select(yycali_97_centered, const)
y = ppe$y_post
# Defining the Epanechnikov kernel and the indicator functions
epanechnikov_kernel <- function(u) {
k = ifelse(abs(u) <= 1, 0.75 * (1 - u^2), 0)
return(k)
}
u = (ppe$yycali_97_centered)/bw_silverman
# calculating beta for treated individuals
w = sapply(u, epanechnikov_kernel)
w
diag(w)
W = diag(w)
View(W)
rm(W)
x = c(1, 2)
x%*%t(x)
t(x)%*%x
ppe = read.csv("progresa_policy_evaluation.csv") %>%
arrange(id_hogar) %>%
mutate(treat = ifelse(pobreden == "1", 1, 0),
y_diff = y_post - y_baseline)
# Centralizing the running variable
ppe = ppe %>%
mutate(yycali_97_centered = yycali_97 - cut,
const = 1)
# Defining variables
X1 = ppe %>%
filter(treat == 1) %>%
select(yycali_97_centered, const)
y1 = ppe%>%
filter(treat == 1) %>%
select(y_post)
X2 = ppe %>%
filter(treat == 0) %>%
select(yycali_97_centered, const)
y2 = ppe%>%
filter(treat == 0) %>%
select(y_post)
u1 = (X1)/bw_silverman
rm(X2, y2)
X0 = ppe %>%
filter(treat == 0) %>%
select(yycali_97_centered, const)
y0 = ppe%>%
filter(treat == 0) %>%
select(y_post)
u0 = (X0)/bw_silverman
View(u1)
u1 = (X1$yycali_97_centered)/bw_silverman
u0 = (X0$yycali_97_centered)/bw_silverman
pacman::p_load(tidyverse,
fixest,
rdd,
rdrobust,
rddensity,
rddtools)
ppe = read.csv("progresa_policy_evaluation.csv") %>%
arrange(id_hogar) %>%
mutate(treat = ifelse(pobreden == "1", 1, 0),
y_diff = y_post - y_baseline)
model1 = lm(y_post ~ treat,
ppe = ppe)
model1 = lm(y_post ~ treat,
data = ppe)
summary(model1)
model2 = lm(y_post ~ treat + age_baseline + sex_baseline,
data = ppe)
summary(model2)
model3 = lm(y_diff ~ treat,
data = ppe)
summary(model3)
model4 = lm(y_diff ~ treat + age_baseline + sex_baseline,
data = ppe)
summary(model4)
# Centralizing the running variable
ppe = ppe %>%
mutate(yycali_97_centered = yycali_97 - cut,
const = 1)
# Corrected Silverman bandwidth estimator
silverman_bandwidth = function(X) {
n = length(X)
h = 0.9 * min(sd(X), IQR(X) / 1.34) * n^(-1/5)
return(h)
}
bw_silverman = silverman_bandwidth(ppe$yycali_97)
# Defining the Epanechnikov kernel and the indicator functions
epanechnikov_kernel <- function(u) {
k = ifelse(abs(u) <= 1, 0.75*(1 - u^2), 0)
return(k)
}
# Defining variables
X1 = ppe %>%
filter(treat == 1) %>%
select(yycali_97_centered, const)
y1 = ppe%>%
filter(treat == 1) %>%
select(y_post)
X0 = ppe %>%
filter(treat == 0) %>%
select(yycali_97_centered, const)
y0 = ppe%>%
filter(treat == 0) %>%
select(y_post)
u1 = (X1$yycali_97_centered)/bw_silverman
u0 = (X0$yycali_97_centered)/bw_silverman
# Calculating kernel weightings
w1 = sapply(u1, epanechnikov_kernel)
w0 = sapply(u0, epanechnikov_kernel)
w1 = epanechnikov_kernel(u1)
w0 = epanechnikov_kernel(u0)
# Calculating kernel weightings
w1 = diag(epanechnikov_kernel(u1))
View(w1)
w0 = diag(epanechnikov_kernel(u0))
# Calculating beta 1
beta1 = solve(t(X1)%*%w1%*%X1)%*%t(X1)%*%w1%*%y1
# Calculating beta 1
beta1 = solve(t(X1)%*%w1%*%X1)%*%(t(X1)%*%w1%*%y1)
# Calculating beta 1
beta1 = solve(t(X1)%*%w1%*%X1)%*%(t(X1)%*%w1%*%y1)
beta0 = solve(t(X0)%*%w0%*%X0)%*%(t(X0)%*%w0%*%y0)
# Calculating beta 1
beta1 = solve(t(X1)%*%X1)%*%(t(X1)%*%y1)
# Defining variables
X1 = as.matrix(ppe %>%
filter(treat == 1) %>%
select(yycali_97_centered, const))
y1 = ppe%>%
filter(treat == 1) %>%
select(y_post) %>%
pull()
X0 = as.matrix(ppe %>%
filter(treat == 0) %>%
select(yycali_97_centered, const))
y0 = ppe%>%
filter(treat == 0) %>%
select(y_post) %>%
pull()
u1 = (X1$yycali_97_centered)/bw_silverman
View(X1)
X1[[yycali_97_centered]]
X1[["yycali_97_centered"]]
X1[, 1]
u1 = (X1[, 1])/bw_silverman
u0 = (X0[, 1])/bw_silverman
# Calculating kernel weightings
w1 = diag(epanechnikov_kernel(u1))
w0 = diag(epanechnikov_kernel(u0))
# Calculating beta 1
beta1 = solve(t(X1)%*%w1%*%X1)%*%(t(X1)%*%w1%*%y1)
beta0 = solve(t(X0)%*%w0%*%X0)%*%(t(X0)%*%w0%*%y0)
# Defining variables
X1 = as.matrix(ppe %>%
filter(treat == 1) %>%
select(const, yycali_97_centered))
y1 = ppe%>%
filter(treat == 1) %>%
select(y_post) %>%
pull()
X0 = as.matrix(ppe %>%
filter(treat == 0) %>%
select(const, yycali_97_centered))
y0 = ppe%>%
filter(treat == 0) %>%
select(y_post) %>%
pull()
u1 = (X1[, 1])/bw_silverman
u0 = (X0[, 1])/bw_silverman
# Calculating kernel weightings
w1 = diag(epanechnikov_kernel(u1))
w0 = diag(epanechnikov_kernel(u0))
u1 = (X1[, 2])/bw_silverman
u0 = (X0[, 2])/bw_silverman
# Calculating kernel weightings
w1 = diag(epanechnikov_kernel(u1))
w0 = diag(epanechnikov_kernel(u0))
# Calculating beta 1
beta1 = solve(t(X1)%*%w1%*%X1)%*%(t(X1)%*%w1%*%y1)
beta0 = solve(t(X0)%*%w0%*%X0)%*%(t(X0)%*%w0%*%y0)
# Calculating beta RDD
beta_rdd = beta1 - beta0
# Corrected Silverman bandwidth estimator
silverman_bandwidth = function(X) {
n = length(X)
h = 0.9*min(sd(X), IQR(X)/1.349)*n^(-1/5)
return(h)
}
bw_silverman = silverman_bandwidth(ppe$yycali_97)
# Defining the Epanechnikov kernel and the indicator functions
epanechnikov_kernel <- function(u) {
k = ifelse(abs(u) <= 1, 0.75*(1 - u^2), 0)
return(k)
}
# Defining variables
X1 = as.matrix(ppe %>%
filter(treat == 1) %>%
select(const, yycali_97_centered))
y1 = ppe%>%
filter(treat == 1) %>%
select(y_post) %>%
pull()
X0 = as.matrix(ppe %>%
filter(treat == 0) %>%
select(const, yycali_97_centered))
y0 = ppe%>%
filter(treat == 0) %>%
select(y_post) %>%
pull()
u1 = (X1[, 2])/bw_silverman
u0 = (X0[, 2])/bw_silverman
# Calculating kernel weightings
w1 = diag(epanechnikov_kernel(u1))
w0 = diag(epanechnikov_kernel(u0))
# Calculating beta 1
beta1 = solve(t(X1)%*%w1%*%X1)%*%(t(X1)%*%w1%*%y1)
# Calculating beta 0
beta0 = solve(t(X0)%*%w0%*%X0)%*%(t(X0)%*%w0%*%y0)
# Calculating beta RDD
beta_rdd = beta1 - beta0
# Corrected Silverman bandwidth estimator
silverman_bandwidth = function(X) {
n = length(X)
h = 2.345*n^(-1/5)*sd(x)
return(h)
}
bw_silverman = silverman_bandwidth(ppe$yycali_97)
# Corrected Silverman bandwidth estimator
silverman_bandwidth = function(X) {
n = length(X)
h = 2.345*n^(-1/5)*sd(X)
return(h)
}
bw_silverman = silverman_bandwidth(ppe$yycali_97)
# Defining the Epanechnikov kernel and the indicator functions
epanechnikov_kernel <- function(u) {
k = ifelse(abs(u) <= 1, 0.75*(1 - u^2), 0)
return(k)
}
# Defining variables
X1 = as.matrix(ppe %>%
filter(treat == 1) %>%
select(const, yycali_97_centered))
y1 = ppe%>%
filter(treat == 1) %>%
select(y_post) %>%
pull()
X0 = as.matrix(ppe %>%
filter(treat == 0) %>%
select(const, yycali_97_centered))
y0 = ppe%>%
filter(treat == 0) %>%
select(y_post) %>%
pull()
u1 = (X1[, 2])/bw_silverman
u0 = (X0[, 2])/bw_silverman
# Calculating kernel weightings
w1 = diag(epanechnikov_kernel(u1))
w0 = diag(epanechnikov_kernel(u0))
# Calculating beta 1
beta1 = solve(t(X1)%*%w1%*%X1)%*%(t(X1)%*%w1%*%y1)
# Calculating beta 0
beta0 = solve(t(X0)%*%w0%*%X0)%*%(t(X0)%*%w0%*%y0)
# Calculating beta RDD
beta_rdd = beta1 - beta0
rdrobust(y = ppe$y_post, x = ppe$yycali97, c = ppe$cut, kernel = "epanechnikov", h = bw_silverman)
rdrobust(y = ppe$y_post, x = ppe$yycali97, c = ppe$cut, kernel = "epanechnikov", h = bw_silverman)
rdrobust(y = ppe$y_post, x = ppe$yycali97, c = ppe$cut, kernel = "epanechnikov")
rdrobust(y = ppe$y_post, x = ppe$yycali_97_centered, c = 0, kernel = "epanechnikov", h = bw_silverman)
# Increase bandwidth
rdd_result = rdrobust(y = ppe$y_post, x = ppe$yycali_97_centered, c = 0, kernel = "epanechnikov", h = bw_silverman)
summary(rdd_result)
# Increase bandwidth
rdd_result = RDestimate(y_post~yycali_97_centered,
data = ppe,
cutpoint = 0,
bw = bw_silverman,
kernel = "epanechnikov")
summary(rdd_result)
beta_rdd
bw_i = bw_silverman*1.5
u1_i = (X1[, 2])/bw_i
u0_i = (X0[, 2])/bw_i
# Calculating kernel weightings
w1_i = diag(epanechnikov_kernel(u1_i))
w0_i = diag(epanechnikov_kernel(u0_i))
# Calculating beta 1
beta1_i = solve(t(X1)%*%w1_i%*%X1)%*%(t(X1)%*%w1_i%*%y1)
# Calculating beta 0
beta0_i = solve(t(X0)%*%w0_i%*%X0)%*%(t(X0)%*%w0_i%*%y0)
# Calculating beta RDD
beta_rdd_i = beta1_i - beta0_i
beta_rdd
beta_rdd_i
beta_rdd_i
bw_d = bw_silverman*0.5
u1_d = (X1[, 2])/bw_d
u0_d = (X0[, 2])/bw_d
# Calculating kernel weightings
w1_d = diag(epanechnikov_kernel(u1_d))
w0_d = diag(epanechnikov_kernel(u0_d))
# Calculating beta 1
beta1_d = solve(t(X1)%*%w1_d%*%X1)%*%(t(X1)%*%w1_d%*%y1)
# Calculating beta 0
beta0_d = solve(t(X0)%*%w0_d%*%X0)%*%(t(X0)%*%w0_d%*%y0)
# Calculating beta RDD
beta_rdd_d = beta1_d - beta0_d
beta_rdd_d
# Definir variáveis chave
X <- pull(data$yycali_97)  # Variável de corte
# Definir variáveis chave
X <- data$yycali_97  # Variável de corte
c <- data$cut        # Cutoff municipal
Y <- data$y_post     # Matrícula após o programa
Treat <- ifelse(X <= c, 1, 0)  # Indicador de tratamento com base no corte
# Estimar beta_1 (para Treat = 1)
beta_1 <- function(X, Y, c, h) {
X_tilde <- cbind(1, X - c)  # Criar X_tilde
weights <- epanechnikov_kernel((X - c) / h) * (X <= c)  # Pesos
WX <- t(X_tilde * weights) %*% X_tilde
WY <- t(X_tilde * weights) %*% Y
beta_hat <- solve(WX) %*% WY
return(beta_hat)
}
# Estimar beta_0 (para Treat = 0)
beta_0 <- function(X, Y, c, h) {
X_tilde <- cbind(1, X - c)  # Criar X_tilde
weights <- epanechnikov_kernel((X - c) / h) * (X > c)  # Pesos
WX <- t(X_tilde * weights) %*% X_tilde
WY <- t(X_tilde * weights) %*% Y
beta_hat <- solve(WX) %*% WY
return(beta_hat)
}
# Calcular beta_1 e beta_0
beta1 <- beta_1(X, Y, c, bw_silverman)[1]  # Primeiro elemento do vetor estimado
# Definir variáveis chave
X <- data$yycali_97  # Variável de corte
# Definir variáveis chave
X <- ppe$yycali_97  # Variável de corte
c <- ppe$cut        # Cutoff municipal
Y <- ppe$y_post     # Matrícula após o programa
Treat <- ifelse(X <= c, 1, 0)  # Indicador de tratamento com base no corte
# Estimar beta_1 (para Treat = 1)
beta_1 <- function(X, Y, c, h) {
X_tilde <- cbind(1, X - c)  # Criar X_tilde
weights <- epanechnikov_kernel((X - c) / h) * (X <= c)  # Pesos
WX <- t(X_tilde * weights) %*% X_tilde
WY <- t(X_tilde * weights) %*% Y
beta_hat <- solve(WX) %*% WY
return(beta_hat)
}
# Estimar beta_0 (para Treat = 0)
beta_0 <- function(X, Y, c, h) {
X_tilde <- cbind(1, X - c)  # Criar X_tilde
weights <- epanechnikov_kernel((X - c) / h) * (X > c)  # Pesos
WX <- t(X_tilde * weights) %*% X_tilde
WY <- t(X_tilde * weights) %*% Y
beta_hat <- solve(WX) %*% WY
return(beta_hat)
}
# Calcular beta_1 e beta_0
beta1 <- beta_1(X, Y, c, bw_silverman)[1]  # Primeiro elemento do vetor estimado
beta0 <- beta_0(X, Y, c, h)[1]  # Primeiro elemento do vetor estimado
beta0 <- beta_0(X, Y, c, bw_silverman)[1]  # Primeiro elemento do vetor estimado
# Calcular beta_RDD
beta_RDD <- beta1 - beta0
# Estimar beta_1 (para Treat = 1)
beta_1 <- function(X, Y, c, h) {
X_tilde <- cbind(1, X - c)  # Criar X_tilde
weights <- epanechnikov_kernel((X - c) / h) * (X <= c)  # Pesos
WX <- t(X_tilde * weights) %*% X_tilde * weights
WY <- t(X_tilde * weights) %*% Y * weights
beta_hat <- solve(WX) %*% WY
return(beta_hat)
}
# Estimar beta_0 (para Treat = 0)
beta_0 <- function(X, Y, c, h) {
X_tilde <- cbind(1, X - c)  # Criar X_tilde
weights <- epanechnikov_kernel((X - c) / h) * (X > c)  # Pesos
WX <- t(X_tilde * weights) %*% X_tilde * weights
WY <- t(X_tilde * weights) %*% Y * weights
beta_hat <- solve(WX) %*% WY
return(beta_hat)
}
# Calcular beta_1 e beta_0
beta1 <- beta_1(X, Y, c, bw_silverman)[1]  # Primeiro elemento do vetor estimado
results = data.frame(
Bandwidth = c("Original", "Increased", "Decreased"),
Beta_RDD = c(beta_rdd, beta_rdd_i, beta_rdd_d)
)
results
results = data.frame(
Bandwidth = c("Original", "Increased", "Decreased"),
Constant = c(beta_rdd[1], beta_rdd_i[1], beta_rdd_d[1]),
Beta_RDD = c(beta_rdd[2], beta_rdd_i[2], beta_rdd_d[2])
)
results
pacman::p_load(tidyverse,
stargazer)
stargazer(summary(model1))
stargazer(model1)
summary(model1)
summary1 = summary(model1)
stargazer(summary1, type = "html")
stargazer(model1, type = "html")
summary(model1)
pacman::p_load(tidyverse)
ppe = read.csv("progresa_policy_evaluation.csv") %>%
arrange(id_hogar) %>%
mutate(treat = ifelse(pobreden == "1", 1, 0),
y_diff = y_post - y_baseline)
model1 = lm(y_post ~ treat,
data = ppe)
summary(model1)
