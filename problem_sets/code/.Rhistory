byrow = TRUE)
p = c(1.05, 1.04, 1.1)
r = c(1.1, 1.09, 1.14)
alpha = 0.18
# Estimating beta using MME
beta_1 = c()
for (i in 1:nrow(c)) {
c_1 = c[i, 1]
c_2 = c[i, 2]
p_1 = p[1]
r_2 = r[2]
beta_1[i] = (p_1*c_1^(-alpha))/(r_2*c_2^(-alpha))
}
beta_hat_1 = sum(beta_1)/length(beta_1)
beta_2 = c()
for (i in 1:nrow(c)) {
c_2 = c[i, 2]
c_3 = c[i, 3]
p_2 = p[2]
r_3 = r[3]
beta_2[i] = (p_2*c_2^(-alpha))/(r_3*c_3^(-alpha))
}
beta_hat_2 = sum(beta_2)/length(beta_2)
# Beta estimates
print(c(beta_hat_1, beta_hat_2))
# Loading data
pacman::p_load(
here
)
iv_data = readRDS(here("problem_sets/data", "iv_data.Rds"))
# Seting the variables
y = iv_data[, 1] # Dependent variable
x = as.matrix(iv_data[, 2:3]) # Endogenous variables
z = as.matrix(iv_data[, 4:6]) # Instruments
# Defining the moment function and the objective function
g_n = function(beta){
u = y - x%*%beta
g_n_beta = colMeans(sweep(z, 1, u, `*`))
return(g_n_beta)
}
J_beta = function(beta){
g_n_beta = g_n(beta)
return(t(g_n_beta) %*% g_n_beta)
}
# Minimizing the objective function
result = optim(par = c(0, 0), fn = J_beta)
# Printing the result
beta_hat = result$par
objective_value = result$value
cat("Beta estimate:", beta_hat, "\n")
cat("Objective function value:", objective_value, "\n")
# Defining the "g_i" function for each observation i
g_i = function(i, beta){
u_i = as.numeric(y[i] - x[i, ] %*% beta)
g_i_beta = z[i, ] * u_i
return(g_i_beta)
}
# Calculating S_hat
S_hat = matrix(0, ncol = 3, nrow = 3)
n = nrow(iv_data) # Nº of observations
for (i in 1:n) {
g_i_beta_hat = g_i(i, beta_hat)
S_hat = S_hat + g_i_beta_hat %*% t(g_i_beta_hat)
}
S_hat = S_hat/n
S_hat
# Redefining the objective function using S_hat
S_hat_inv = solve(S_hat)
J_beta_opt = function(beta){
g_n_beta = g_n(beta)
return(t(g_n_beta) %*% S_hat_inv %*% g_n_beta)
}
# Minimizing the objective function
result_opt = optim(par = c(0, 0), fn = J_beta_opt)
# Printing the result
beta_hat_opt = result_opt$par
cat("Beta estimate:", beta_hat_opt, "\n")
# Defining the Jacobian G_n(β)
G_n = function(beta) {
n = nrow(iv_data)         # Nº of observations
g_n_beta = g_n(beta)      # Calculating g_n(β)
# Initialize the Jacobian matrix G_n(β)
G_n_matrix = matrix(0, nrow = 3, ncol = 2)
# Calculating the Jacobian
for (i in 1:n) {
u_i = y[i] - x[i, ] %*% beta
for (j in 1:2) {
# Partial derivatives of g_n(β) with respect to β_j
G_n_matrix[, j] = G_n_matrix[, j] + z[i, ] * (-x[i, j]) * (1/n)
}
}
return(G_n_matrix)
}
# Calculate the Jacobian in beta_hat
G_hat = G_n(beta_hat)
# Result
G_hat
# Calculating the product G_hat' S_hat^{-1} G_hat
G_hat_transpose = t(G_hat)
product = G_hat_transpose %*% S_hat_inv %*% G_hat
# Calculating the covariance matrix V_GMM
V_GMM = (1/n) * solve(product)
# Resultado
V_GMM
# Loading needed packages
pacman::p_load(
tidyverse,
fixest
)
# Importing the database
temperature_states = readRDS(here("problem_sets/data", "temperature_states.Rds"))
# Step 1: Calculate the national average daily maximum temperature
national_avg_temp = temperature_states %>%
group_by(date) %>% # Group by date
# Calculate the average max temperature
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE))
# Step 2: Count the number of days with average temperature above 32°C per year-month
days_above_32C = national_avg_temp %>%
mutate(year_month = format(date, "%Y-%m")) %>% # Create a year-month column
# Filter for temperatures above 32°C
filter(avg_temp > 32) %>%
group_by(year_month) %>% # Group by year-month
summarise(days_above_32C = n()) %>% # Count the days
# Add columns for the year and month
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Step 3: Regression of the count of days above 32°C on calendar year with month fixed effects
# Perform regression using fixest
model = feols(days_above_32C ~ year | month, data = days_above_32C)
# Display regression results
summary(model)
# Step 4: Repeat the analysis for each region
results_by_region = lapply(unique(temperature_states$region), function(reg) {
# Filter the data for the specific region
region_data = temperature_states %>%
filter(region == reg)  # Keep only the rows for the current region
# Calculate the average daily temperature for the region
region_avg_temp = region_data %>%
group_by(date) %>%  # Group by date
# Calculate average max temperature for the region
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE))
# Count the number of days with average temperature above 32°C per year-month for the region
region_days_above_32C = region_avg_temp %>%
mutate(year_month = format(date, "%Y-%m")) %>% # Create a year-month column
filter(avg_temp > 32) %>% # Filter for temperatures above 32°C
group_by(year_month) %>% # Group by year-month
summarise(days_above_32C = n()) %>% # Count the days
# Add columns for the year and month
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Perform regression for the region
model_region = feols(days_above_32C ~ year | month,
data = region_days_above_32C)
# Return the region name and model
return(list(region = reg, model = model_region))
})
# Display results by region
results_by_region
# Step 1: Calculate the average maximum temperature per month and per state
# Create a 'year-month' column
temperature_states = temperature_states %>%
mutate(year_month = format(date, "%Y-%m")) # Format year-month
# Step 2: Calculate the average temperature (tmax) per state and per month
avg_temp_per_month = temperature_states %>%
group_by(state, year_month) %>%
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE)) %>%
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Step 3: Filter the data for the periods 2001-2004 and 2018-2021
avg_temp_2001_2004 = avg_temp_per_month %>%
filter(year >= 2001 & year <= 2004)
avg_temp_2018_2021 = avg_temp_per_month %>%
filter(year >= 2018 & year <= 2021)
# Step 4: Kernel density estimation using Gaussian kernel with bandwidth h = 2
# For the period 2001-2004
kde_2001_2004 = density(avg_temp_2001_2004$avg_temp, kernel = "gaussian", bw = 2)
# For the period 2018-2021
kde_2018_2021 = density(avg_temp_2018_2021$avg_temp, kernel = "gaussian", bw = 2)
# Step 5: Plot the two estimated density functions on top of each other
# Generate density values for both periods
plot_data_2001_2004 = data.frame(
x = kde_2001_2004$x,
density = kde_2001_2004$y,
period = "2001-2004"
)
plot_data_2018_2021 = data.frame(
x = kde_2018_2021$x,
density = kde_2018_2021$y,
period = "2018-2021"
)
# Combine the two datasets for plotting
plot_data = rbind(plot_data_2001_2004, plot_data_2018_2021)
# Step 6: Plot the densities using ggplot2
ggplot(plot_data, aes(x = x, y = density, color = period)) +
geom_line(linewidth = 1.2) +
labs(title = "Kernel Density of Average Monthly Temperatures",
x = "Average Monthly Temperature (°C)",
y = "Density",
color = "Period") +
theme_minimal() +
scale_color_manual(values = c("2001-2004" = "blue", "2018-2021" = "red"))
# Loading needed package
pacman::p_load(
np
)
# Step 1: Calculate the average maximum temperature per month and per state, as done previously
avg_temp_per_month_region = temperature_states %>%
group_by(state, year_month, region, year) %>%
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE)) %>%
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Step 2: Define a function to perform local constant regression for each region
local_constant_regression = function(region_data, kernel = "gaussian", bandwidth = 2) {
# Extract year and temperature data
x = region_data$year # Calendar year
y = region_data$avg_temp # Average temperature
# Perform local constant regression using npreg() from the np package
np_model = npreg(tydat = y, txdat = x, regtype = "lc", bwmethod = "cv.aic", ckertype = kernel, bws = bandwidth)
# Create a dataframe to hold the fitted values (estimates) for plotting
fitted_data = data.frame(
year = np_model$eval$x,
fitted_temp = np_model$mean,
region = region_data$region
)
return(fitted_data)
}
# Step 3: Apply the regression to each of the 5 macro regions
regions = unique(temperature_states$region) # Extract unique macro regions
fitted_results = list() # List to store results for each region
for (reg in regions) {
region_data = avg_temp_per_month_region %>%
filter(region == reg) # Filter data for the current region
# Perform local constant regression and store the fitted results
fitted_results[[reg]] = local_constant_regression(region_data)
}
# Step 4: Plot the results for all regions
plot_data = do.call(rbind, fitted_results) %>%
mutate(region = ifelse(region == 1, "North",
ifelse(region == 2, "Northeast",
ifelse(region == 3, "Southeast",
ifelse(region == 4, "South",
"Central West")))))
ggplot(plot_data, aes(x = year, y = fitted_temp, color = region)) +
geom_line(linewidth = 1.2) +
labs(title = "Local Constant Regression of Average Temperature by Year",
x = "Year",
y = "Fitted Average Monthly Temperature (°C)",
color = "Region") +
theme_minimal() +
scale_color_manual(values = c("North" = "blue", "Northeast" = "green",
"Southeast" = "red", "South" = "purple",
"Central West" = "orange"))
rmarkdown::render("ps1.Rmd",
output_format = "html_document",
output_dir = here("problem_sets/outputs"))
knitr::opts_chunk$set(echo = TRUE)
# Setting objects
c = matrix(c(12547, 4818, 3440, 8583, 6657, 4990, 14493, 7990, 6139, 7043, 3758, 1487, 13238, 11033, 4921),
nrow = 5,
ncol = 3,
byrow = TRUE)
p = c(1.05, 1.04, 1.1)
r = c(1.1, 1.09, 1.14)
alpha = 0.18
# Estimating beta using MME
beta_1 = c()
for (i in 1:nrow(c)) {
c_1 = c[i, 1]
c_2 = c[i, 2]
p_1 = p[1]
r_2 = r[2]
beta_1[i] = (p_1*c_1^(-alpha))/(r_2*c_2^(-alpha))
}
beta_hat_1 = sum(beta_1)/length(beta_1)
beta_2 = c()
for (i in 1:nrow(c)) {
c_2 = c[i, 2]
c_3 = c[i, 3]
p_2 = p[2]
r_3 = r[3]
beta_2[i] = (p_2*c_2^(-alpha))/(r_3*c_3^(-alpha))
}
beta_hat_2 = sum(beta_2)/length(beta_2)
# Beta estimates
print(c(beta_hat_1, beta_hat_2))
# Loading data
pacman::p_load(
here
)
iv_data = readRDS(here("problem_sets/data", "iv_data.Rds"))
# Seting the variables
y = iv_data[, 1] # Dependent variable
x = as.matrix(iv_data[, 2:3]) # Endogenous variables
z = as.matrix(iv_data[, 4:6]) # Instruments
# Defining the moment function and the objective function
g_n = function(beta){
u = y - x%*%beta
g_n_beta = colMeans(sweep(z, 1, u, `*`))
return(g_n_beta)
}
J_beta = function(beta){
g_n_beta = g_n(beta)
return(t(g_n_beta) %*% g_n_beta)
}
# Minimizing the objective function
result = optim(par = c(0, 0), fn = J_beta)
# Printing the result
beta_hat = result$par
objective_value = result$value
cat("Beta estimate:", beta_hat, "\n")
cat("Objective function value:", objective_value, "\n")
# Defining the "g_i" function for each observation i
g_i = function(i, beta){
u_i = as.numeric(y[i] - x[i, ] %*% beta)
g_i_beta = z[i, ] * u_i
return(g_i_beta)
}
# Calculating S_hat
S_hat = matrix(0, ncol = 3, nrow = 3)
n = nrow(iv_data) # Nº of observations
for (i in 1:n) {
g_i_beta_hat = g_i(i, beta_hat)
S_hat = S_hat + g_i_beta_hat %*% t(g_i_beta_hat)
}
S_hat = S_hat/n
S_hat
# Redefining the objective function using S_hat
S_hat_inv = solve(S_hat)
J_beta_opt = function(beta){
g_n_beta = g_n(beta)
return(t(g_n_beta) %*% S_hat_inv %*% g_n_beta)
}
# Minimizing the objective function
result_opt = optim(par = c(0, 0), fn = J_beta_opt)
# Printing the result
beta_hat_opt = result_opt$par
cat("Beta estimate:", beta_hat_opt, "\n")
# Defining the Jacobian G_n(β)
G_n = function(beta) {
n = nrow(iv_data)         # Nº of observations
g_n_beta = g_n(beta)      # Calculating g_n(β)
# Initialize the Jacobian matrix G_n(β)
G_n_matrix = matrix(0, nrow = 3, ncol = 2)
# Calculating the Jacobian
for (i in 1:n) {
u_i = y[i] - x[i, ] %*% beta
for (j in 1:2) {
# Partial derivatives of g_n(β) with respect to β_j
G_n_matrix[, j] = G_n_matrix[, j] + z[i, ] * (-x[i, j]) * (1/n)
}
}
return(G_n_matrix)
}
# Calculate the Jacobian in beta_hat
G_hat = G_n(beta_hat)
# Result
G_hat
# Calculating the product G_hat' S_hat^{-1} G_hat
G_hat_transpose = t(G_hat)
product = G_hat_transpose %*% S_hat_inv %*% G_hat
# Calculating the covariance matrix V_GMM
V_GMM = (1/n) * solve(product)
# Resultado
V_GMM
# Loading needed packages
pacman::p_load(
tidyverse,
fixest
)
# Importing the database
temperature_states = readRDS(here("problem_sets/data", "temperature_states.Rds"))
# Step 1: Calculate the national average daily maximum temperature
national_avg_temp = temperature_states %>%
group_by(date) %>% # Group by date
# Calculate the average max temperature
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE))
# Step 2: Count the number of days with average temperature above 32°C per year-month
days_above_32C = national_avg_temp %>%
mutate(year_month = format(date, "%Y-%m")) %>% # Create a year-month column
# Filter for temperatures above 32°C
filter(avg_temp > 32) %>%
group_by(year_month) %>% # Group by year-month
summarise(days_above_32C = n()) %>% # Count the days
# Add columns for the year and month
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Step 3: Regression of the count of days above 32°C on calendar year with month fixed effects
# Perform regression using fixest
model = feols(days_above_32C ~ year | month, data = days_above_32C)
# Display regression results
summary(model)
# Step 4: Repeat the analysis for each region
results_by_region = lapply(unique(temperature_states$region), function(reg) {
# Filter the data for the specific region
region_data = temperature_states %>%
filter(region == reg)  # Keep only the rows for the current region
# Calculate the average daily temperature for the region
region_avg_temp = region_data %>%
group_by(date) %>%  # Group by date
# Calculate average max temperature for the region
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE))
# Count the number of days with average temperature above 32°C per year-month for the region
region_days_above_32C = region_avg_temp %>%
mutate(year_month = format(date, "%Y-%m")) %>% # Create a year-month column
filter(avg_temp > 32) %>% # Filter for temperatures above 32°C
group_by(year_month) %>% # Group by year-month
summarise(days_above_32C = n()) %>% # Count the days
# Add columns for the year and month
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Perform regression for the region
model_region = feols(days_above_32C ~ year | month,
data = region_days_above_32C)
# Return the region name and model
return(list(region = reg, model = model_region))
})
# Display results by region
results_by_region
# Step 1: Calculate the average maximum temperature per month and per state
# Create a 'year-month' column
temperature_states = temperature_states %>%
mutate(year_month = format(date, "%Y-%m")) # Format year-month
# Step 2: Calculate the average temperature (tmax) per state and per month
avg_temp_per_month = temperature_states %>%
group_by(state, year_month) %>%
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE)) %>%
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Step 3: Filter the data for the periods 2001-2004 and 2018-2021
avg_temp_2001_2004 = avg_temp_per_month %>%
filter(year >= 2001 & year <= 2004)
avg_temp_2018_2021 = avg_temp_per_month %>%
filter(year >= 2018 & year <= 2021)
# Step 4: Kernel density estimation using Gaussian kernel with bandwidth h = 2
# For the period 2001-2004
kde_2001_2004 = density(avg_temp_2001_2004$avg_temp, kernel = "gaussian", bw = 2)
# For the period 2018-2021
kde_2018_2021 = density(avg_temp_2018_2021$avg_temp, kernel = "gaussian", bw = 2)
# Step 5: Plot the two estimated density functions on top of each other
# Generate density values for both periods
plot_data_2001_2004 = data.frame(
x = kde_2001_2004$x,
density = kde_2001_2004$y,
period = "2001-2004"
)
plot_data_2018_2021 = data.frame(
x = kde_2018_2021$x,
density = kde_2018_2021$y,
period = "2018-2021"
)
# Combine the two datasets for plotting
plot_data = rbind(plot_data_2001_2004, plot_data_2018_2021)
# Step 6: Plot the densities using ggplot2
ggplot(plot_data, aes(x = x, y = density, color = period)) +
geom_line(linewidth = 1.2) +
labs(title = "Kernel Density of Average Monthly Temperatures",
x = "Average Monthly Temperature (°C)",
y = "Density",
color = "Period") +
theme_minimal() +
scale_color_manual(values = c("2001-2004" = "blue", "2018-2021" = "red"))
# Loading needed package
pacman::p_load(
np
)
# Step 1: Calculate the average maximum temperature per month and per state, as done previously
avg_temp_per_month_region = temperature_states %>%
group_by(state, year_month, region, year) %>%
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE)) %>%
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Step 2: Define a function to perform local constant regression for each region
local_constant_regression = function(region_data, kernel = "gaussian", bandwidth = 2) {
# Extract year and temperature data
x = region_data$year # Calendar year
y = region_data$avg_temp # Average temperature
# Perform local constant regression using npreg() from the np package
np_model = npreg(tydat = y, txdat = x, regtype = "lc", bwmethod = "cv.aic", ckertype = kernel, bws = bandwidth)
# Create a dataframe to hold the fitted values (estimates) for plotting
fitted_data = data.frame(
year = np_model$eval$x,
fitted_temp = np_model$mean,
region = region_data$region
)
return(fitted_data)
}
# Step 3: Apply the regression to each of the 5 macro regions
regions = unique(temperature_states$region) # Extract unique macro regions
fitted_results = list() # List to store results for each region
for (reg in regions) {
region_data = avg_temp_per_month_region %>%
filter(region == reg) # Filter data for the current region
# Perform local constant regression and store the fitted results
fitted_results[[reg]] = local_constant_regression(region_data)
}
# Step 4: Plot the results for all regions
plot_data = do.call(rbind, fitted_results) %>%
mutate(region = ifelse(region == 1, "North",
ifelse(region == 2, "Northeast",
ifelse(region == 3, "Southeast",
ifelse(region == 4, "South",
"Central West")))))
ggplot(plot_data, aes(x = year, y = fitted_temp, color = region)) +
geom_line(linewidth = 1.2) +
labs(title = "Local Constant Regression of Average Temperature by Year",
x = "Year",
y = "Fitted Average Monthly Temperature (°C)",
color = "Region") +
theme_minimal() +
scale_color_manual(values = c("North" = "blue", "Northeast" = "green",
"Southeast" = "red", "South" = "purple",
"Central West" = "orange"))
