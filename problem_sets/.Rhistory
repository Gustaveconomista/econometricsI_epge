pacman::p_load(
tidyverse,
fixest
)
temperature_states = readRDS(here("problem_sets/data", "temperature_states.Rds"))
# Step 1: Calculate the national average daily maximum temperature
national_avg_temp = temperature_states %>%
group_by(date) %>% # Group by date
# Calculate the average max temperature
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE))
# Step 2: Count the number of days with average temperature above 32°C per year-month
days_above_32C = national_avg_temp %>%
mutate(year_month = format(date, "%Y-%m")) %>% # Create a year-month column
filter(avg_temp > 32) %>%                     # Filter for temperatures above 32°C
group_by(year_month) %>%                      # Group by year-month
summarise(days_above_32C = n())               # Count the days
# Step 3: Regression of the count of days above 32°C on calendar year with month fixed effects
# Add columns for the year and month
days_above_32C = days_above_32C %>%
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Perform regression using fixest
model = feols(days_above_32C ~ year | month, data = days_above_32C)
# Display regression results
summary(model)
# Step 4: Repeat the analysis for each region
results_by_region = lapply(unique(temperature_states$region), function(region) {
# Filter the data for the specific region
region_data = temperature_states %>%
filter(region == region)                    # Keep only the rows for the current region
# Calculate the average daily temperature for the region
region_avg_temp = region_data %>%
group_by(date) %>%                          # Group by date
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE)) # Calculate average max temperature for the region
# Count the number of days with average temperature above 32°C per year-month for the region
region_days_above_32C = region_avg_temp %>%
mutate(year_month = format(date, "%Y-%m")) %>% # Create a year-month column
filter(avg_temp > 32) %>%                     # Filter for temperatures above 32°C
group_by(year_month) %>%                      # Group by year-month
summarise(days_above_32C = n())               # Count the days
# Add columns for the year and month
region_days_above_32C = region_days_above_32C %>%
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Perform regression for the region
model_region = feols(days_above_32C ~ year | month,
data = region_days_above_32C)
# Return the region name and model
return(list(region = region, model = model_region))
})
# Display results by region
results_by_region
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(
tidyverse,
fixest
)
pacman::p_load(
tidyverse,
fixest
)
temperature_states = readRDS(here("problem_sets/data", "temperature_states.Rds"))
# Loading data
pacman::p_load(
here
)
temperature_states = readRDS(here("problem_sets/data", "temperature_states.Rds"))
View(temperature_states)
# Step 1: Calculate the national average daily maximum temperature
national_avg_temp = temperature_states %>%
group_by(date) %>% # Group by date
# Calculate the average max temperature
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE))
View(national_avg_temp)
dim(unique(temperature_states$state))[1]
dim(unique(temperature_states$state))[2]
dim(temperature_states %>% distinct(state))[1]
27*8480
# Step 2: Count the number of days with average temperature above 32°C per year-month
days_above_32C = national_avg_temp %>%
mutate(year_month = format(date, "%Y-%m")) %>% # Create a year-month column
# Filter for temperatures above 32°C
filter(avg_temp > 32) %>%
group_by(year_month) %>%  # Group by year-month
summarise(days_above_32C = n())  # Count the days
View(days_above_32C)
# Step 2: Count the number of days with average temperature above 32°C per year-month
days_above_32C = national_avg_temp %>%
mutate(year_month = format(date, "%Y-%m")) %>% # Create a year-month column
# Filter for temperatures above 32°C
filter(avg_temp > 32) %>%
group_by(year_month) %>%  # Group by year-month
summarise(days_above_32C = n()) %>%  # Count the days
# Add columns for the year and month
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Step 3: Regression of the count of days above 32°C on calendar year with month fixed effects
# Perform regression using fixest
model = feols(days_above_32C ~ year | month, data = days_above_32C)
# Display regression results
summary(model)
model
summary(model)
unique(temperature_states$region)
# Step 4: Repeat the analysis for each region
results_by_region = lapply(unique(temperature_states$region), function(region) {
# Filter the data for the specific region
region_data = temperature_states %>%
filter(region == region)  # Keep only the rows for the current region
# Calculate the average daily temperature for the region
region_avg_temp = region_data %>%
group_by(date) %>%  # Group by date
# Calculate average max temperature for the region
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE))
# Count the number of days with average temperature above 32°C per year-month for the region
region_days_above_32C = region_avg_temp %>%
mutate(year_month = format(date, "%Y-%m")) %>% # Create a year-month column
filter(avg_temp > 32) %>% # Filter for temperatures above 32°C
group_by(year_month) %>% # Group by year-month
summarise(days_above_32C = n()) %>% # Count the days
# Add columns for the year and month
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Perform regression for the region
model_region = feols(days_above_32C ~ year | month,
data = region_days_above_32C)
# Return the region name and model
return(list(region = region, model = model_region))
})
# Display results by region
results_by_region
# Display results by region
results_by_region
View(results_by_region)
View(results_by_region)
# Step 4: Repeat the analysis for each region
results_by_region = lapply(unique(temperature_states$region), function(reg) {
# Filter the data for the specific region
region_data = temperature_states %>%
filter(region == reg)  # Keep only the rows for the current region
# Calculate the average daily temperature for the region
region_avg_temp = region_data %>%
group_by(date) %>%  # Group by date
# Calculate average max temperature for the region
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE))
# Count the number of days with average temperature above 32°C per year-month for the region
region_days_above_32C = region_avg_temp %>%
mutate(year_month = format(date, "%Y-%m")) %>% # Create a year-month column
filter(avg_temp > 32) %>% # Filter for temperatures above 32°C
group_by(year_month) %>% # Group by year-month
summarise(days_above_32C = n()) %>% # Count the days
# Add columns for the year and month
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Perform regression for the region
model_region = feols(days_above_32C ~ year | month,
data = region_days_above_32C)
# Return the region name and model
return(list(region = reg, model = model_region))
})
# Display results by region
results_by_region
# Loading needed package
pacman::p_load(
kdensity
)
# Step 1: Calculate the average maximum temperature per month and per state
# Create a 'year-month' column
temperature_states = temperature_states %>%
mutate(year_month = format(date, "%Y-%m")) # Format year-month
View(temperature_states)
View(temperature_states)
# Step 2: Calculate the average temperature (tmax) per state and per month
avg_temp_per_month = temperature_states %>%
group_by(state, year_month) %>%
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE)) %>%
ungroup()
View(avg_temp_per_month)
# Step 3: Filter the data for the periods 2001-2004 and 2018-2021
avg_temp_2001_2004 = avg_temp_per_month %>%
filter(ano >= 2001 & ano <= 2004)
avg_temp_2018_2021 = avg_temp_per_month %>%
filter(ano >= 2018 & ano <= 2021)
# Step 3: Filter the data for the periods 2001-2004 and 2018-2021
avg_temp_2001_2004 = avg_temp_per_month %>%
filter(year >= 2001 & year <= 2004)
avg_temp_2018_2021 = avg_temp_per_month %>%
filter(year >= 2018 & year <= 2021)
View(avg_temp_per_month)
avg_temp_per_month = temperature_states %>%
group_by(state, year_month) %>%
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE))
# Step 2: Calculate the average temperature (tmax) per state and per month
avg_temp_per_month = temperature_states %>%
group_by(state, year_month) %>%
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE)) %>%
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
# Step 3: Filter the data for the periods 2001-2004 and 2018-2021
avg_temp_2001_2004 = avg_temp_per_month %>%
filter(year >= 2001 & year <= 2004)
avg_temp_2018_2021 = avg_temp_per_month %>%
filter(year >= 2018 & year <= 2021)
# Step 4: Kernel density estimation using Gaussian kernel with bandwidth h = 2
# For the period 2001-2004
kde_2001_2004 = kdensity(avg_temp_2001_2004$avg_temp, kernel = "gaussian", bw = 2)
# For the period 2018-2021
kde_2018_2021 = kdensity(avg_temp_2018_2021$avg_temp, kernel = "gaussian", bw = 2)
# Step 5: Plot the two estimated density functions on top of each other
# Generate density values for both periods
plot_data_2001_2004 = data.frame(
x = kde_2001_2004$x,
density = kde_2001_2004$y,
period = "2001-2004"
)
View(avg_temp_2001_2004)
kdensity(avg_temp_2001_2004$avg_temp, kernel = "gaussian", bw = 2)
# Step 4: Kernel density estimation using Gaussian kernel with bandwidth h = 2
# For the period 2001-2004
kde_2001_2004 = kdensity(avg_temp_2001_2004$avg_temp, kernel = "gaussian", bw = 2)
kdensity(avg_temp_2001_2004$avg_temp, kernel = "gaussian", bw = 2)
avg_temp_2001_2004$avg_temp
summary(kdensity(avg_temp_2001_2004$avg_temp, kernel = "gaussian", bw = 2))
kde_2001_2004(avg_temp_2001_2004$avg_temp)
# Step 4: Kernel density estimation using Gaussian kernel with bandwidth h = 2
# For the period 2001-2004
kde_2001_2004 = density(avg_temp_2001_2004$avg_temp, kernel = "gaussian", bw = 2)
# For the period 2018-2021
kde_2018_2021 = density(avg_temp_2018_2021$avg_temp, kernel = "gaussian", bw = 2)
View(kde_2001_2004)
# Step 5: Plot the two estimated density functions on top of each other
# Generate density values for both periods
plot_data_2001_2004 = data.frame(
x = kde_2001_2004$x,
density = kde_2001_2004$y,
period = "2001-2004"
)
plot_data_2018_2021 = data.frame(
x = kde_2018_2021$x,
density = kde_2018_2021$y,
period = "2018-2021"
)
# Combine the two datasets for plotting
plot_data = rbind(plot_data_2001_2004, plot_data_2018_2021)
# Step 6: Plot the densities using ggplot2
ggplot(plot_data, aes(x = x, y = density, color = period)) +
geom_line(size = 1.2) +
labs(title = "Kernel Density of Average Monthly Temperatures",
x = "Average Monthly Temperature (°C)",
y = "Density",
color = "Period") +
theme_minimal() +
scale_color_manual(values = c("2001-2004" = "blue", "2018-2021" = "red"))
# Step 6: Plot the densities using ggplot2
ggplot(plot_data, aes(x = x, y = density, color = period)) +
geom_line(linewidth = 1.2) +
labs(title = "Kernel Density of Average Monthly Temperatures",
x = "Average Monthly Temperature (°C)",
y = "Density",
color = "Period") +
theme_minimal() +
scale_color_manual(values = c("2001-2004" = "blue", "2018-2021" = "red"))
# Loading needed package
pacman::p_load(
np
)
# Step 2: Define a function to perform local constant regression for each region
local_constant_regression = function(region_data, kernel = "gaussian", bandwidth = 2) {
# Extract year and temperature data
x = region_data$year # Calendar year
y = region_data$avg_temp # Average temperature
# Perform local constant regression using npreg() from the np package
np_model = npreg(tydat = y, txdat = x, regtype = "lc", bwmethod = "cv.ls", ckertype = kernel, bws = bandwidth)
# Create a dataframe to hold the fitted values (estimates) for plotting
fitted_data = data.frame(
year = np_model$evalx,
fitted_temp = np_model$mean
)
return(fitted_data)
}
# Step 3: Apply the regression to each of the 5 macro regions
regions = unique(temperature_states$region) # Extract unique macro regions
fitted_results = list() # List to store results for each region
for (reg in regions) {
region_data = avg_temp_per_month %>%
filter(region == reg) # Filter data for the current region
# Perform local constant regression and store the fitted results
fitted_results[[reg]] = local_constant_regression(region_data)
}
# Step 1: Calculate the average maximum temperature per month and per state, as done previously
avg_temp_per_month_region = temperature_states %>%
group_by(state, year_month, region, year) %>%
summarise(avg_temp = mean(mean_tmax, na.rm = TRUE)) %>%
mutate(year = as.numeric(substring(year_month, 1, 4)),
month = as.numeric(substring(year_month, 6, 7)))
for (reg in regions) {
region_data = avg_temp_per_month_region %>%
filter(region == reg) # Filter data for the current region
# Perform local constant regression and store the fitted results
fitted_results[[reg]] = local_constant_regression(region_data)
}
# Step 2: Define a function to perform local constant regression for each region
local_constant_regression = function(region_data, kernel = "gaussian", bandwidth = 2) {
# Extract year and temperature data
x = region_data$year # Calendar year
y = region_data$avg_temp # Average temperature
# Perform local constant regression using npreg() from the np package
np_model = npreg(tydat = y, txdat = x, regtype = "lc", bwmethod = "cv.aic", ckertype = kernel, bws = bandwidth)
# Create a dataframe to hold the fitted values (estimates) for plotting
fitted_data = data.frame(
year = np_model$evalx,
fitted_temp = np_model$mean
)
return(fitted_data)
}
# Step 3: Apply the regression to each of the 5 macro regions
regions = unique(temperature_states$region) # Extract unique macro regions
fitted_results = list() # List to store results for each region
for (reg in regions) {
region_data = avg_temp_per_month_region %>%
filter(region == reg) # Filter data for the current region
# Perform local constant regression and store the fitted results
fitted_results[[reg]] = local_constant_regression(region_data)
}
View(avg_temp_per_month_region)
View(region_data)
local_constant_regression(region_data)
x = region_data$year
y = region_data$avg_temp
np_model = npreg(tydat = y, txdat = x, regtype = "lc", bwmethod = "cv.aic", ckertype = kernel, bws = bandwidth)
np_model = npreg(tydat = y, txdat = x, regtype = "lc", bwmethod = "cv.aic", ckertype = kernel, bws = 2)
np_model = npreg(tydat = y, txdat = x, regtype = "lc", bwmethod = "cv.aic", ckertype = "gaussian", bws = 2)
fitted_data = data.frame(
year = np_model$evalx,
fitted_temp = np_model$mean
)
np_model$eval$x
np_model$mean
fitted_data = data.frame(
year = np_model$eval$x,
fitted_temp = np_model$mean
)
# Step 2: Define a function to perform local constant regression for each region
local_constant_regression = function(region_data, kernel = "gaussian", bandwidth = 2) {
# Extract year and temperature data
x = region_data$year # Calendar year
y = region_data$avg_temp # Average temperature
# Perform local constant regression using npreg() from the np package
np_model = npreg(tydat = y, txdat = x, regtype = "lc", bwmethod = "cv.aic", ckertype = kernel, bws = bandwidth)
# Create a dataframe to hold the fitted values (estimates) for plotting
fitted_data = data.frame(
year = np_model$eval$x,
fitted_temp = np_model$mean
)
return(fitted_data)
}
for (reg in regions) {
region_data = avg_temp_per_month_region %>%
filter(region == reg) # Filter data for the current region
# Perform local constant regression and store the fitted results
fitted_results[[reg]] = local_constant_regression(region_data)
}
# Step 4: Plot the results for all regions
plot_data = do.call(rbind, lapply(names(fitted_results), function(region) {
result = fitted_results[[region]]
result$region = region  # Add region information
return(result)
}))
ggplot(plot_data, aes(x = year, y = fitted_temp, color = region)) +
geom_line(size = 1.2) +
labs(title = "Local Constant Regression of Average Temperature by Year",
x = "Year",
y = "Fitted Average Monthly Temperature (°C)",
color = "Region") +
theme_minimal() +
scale_color_manual(values = c("North" = "blue", "Northeast" = "green",
"Southeast" = "red", "South" = "purple",
"Central West" = "orange"))
View(fitted_data)
View(fitted_results)
# Step 2: Define a function to perform local constant regression for each region
local_constant_regression = function(region_data, kernel = "gaussian", bandwidth = 2) {
# Extract year and temperature data
x = region_data$year # Calendar year
y = region_data$avg_temp # Average temperature
# Perform local constant regression using npreg() from the np package
np_model = npreg(tydat = y, txdat = x, regtype = "lc", bwmethod = "cv.aic", ckertype = kernel, bws = bandwidth)
# Create a dataframe to hold the fitted values (estimates) for plotting
fitted_data = data.frame(
year = np_model$eval$x,
fitted_temp = np_model$mean,
region = region_data$region
)
return(fitted_data)
}
fitted_results = list() # List to store results for each region
for (reg in regions) {
region_data = avg_temp_per_month_region %>%
filter(region == reg) # Filter data for the current region
# Perform local constant regression and store the fitted results
fitted_results[[reg]] = local_constant_regression(region_data)
}
View(fitted_data)
View(fitted_results)
# Step 4: Plot the results for all regions
plot_data = do.call(rbind, lapply(names(fitted_results)))
# Step 4: Plot the results for all regions
plot_data = do.call(rbind, names(fitted_results))
# Step 4: Plot the results for all regions
plot_data = do.call(rbind, fitted_results)
View(plot_data)
View(plot_data)
ggplot(plot_data, aes(x = year, y = fitted_temp, color = region)) +
geom_line(size = 1.2) +
labs(title = "Local Constant Regression of Average Temperature by Year",
x = "Year",
y = "Fitted Average Monthly Temperature (°C)",
color = "Region") +
theme_minimal() +
scale_color_manual(values = c("North" = "blue", "Northeast" = "green",
"Southeast" = "red", "South" = "purple",
"Central West" = "orange"))
# Step 4: Plot the results for all regions
plot_data = do.call(rbind, fitted_results) %>%
mutate(region = ifelse(region == 1, "North",
ifelse(region == 2, "Northeast",
ifelse(region == 3, "Southeast",
ifelse(region == 4, "South",
"Central West")))))
ggplot(plot_data, aes(x = year, y = fitted_temp, color = region)) +
geom_line(size = 1.2) +
labs(title = "Local Constant Regression of Average Temperature by Year",
x = "Year",
y = "Fitted Average Monthly Temperature (°C)",
color = "Region") +
theme_minimal() +
scale_color_manual(values = c("North" = "blue", "Northeast" = "green",
"Southeast" = "red", "South" = "purple",
"Central West" = "orange"))
ggplot(plot_data, aes(x = year, y = fitted_temp, color = region)) +
geom_line(linewidth = 1.2) +
labs(title = "Local Constant Regression of Average Temperature by Year",
x = "Year",
y = "Fitted Average Monthly Temperature (°C)",
color = "Region") +
theme_minimal() +
scale_color_manual(values = c("North" = "blue", "Northeast" = "green",
"Southeast" = "red", "South" = "purple",
"Central West" = "orange"))
getwd()
here("problem_sets/results")
rmarkdown::render("ps1.Rmd",
output_format = "html_document",
output_dir = here("problem_sets/results"))
getwd()
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(
tidyverse,
fixest
)
pacman::p_load(
tidyverse,
fixest
)
temperature_states = readRDS(here("problem_sets/data", "temperature_states.Rds"))
# Loading data
pacman::p_load(
here
)
temperature_states = readRDS(here("problem_sets/data", "temperature_states.Rds"))
setwd
getwd()
setwd("C:/Users/gusta/OneDrive - Fundacao Getulio Vargas - FGV/Área de Trabalho/EPGE - MATERIAL/Econometria I/Parte 1/Programação/econometricsI_epge")
temperature_states = readRDS(here("problem_sets/data", "temperature_states.Rds"))
getwd()
setwd("C:/Users/gusta/OneDrive - Fundacao Getulio Vargas - FGV/Área de Trabalho/EPGE - MATERIAL/Econometria I/Parte 1/Programação/econometricsI_epge/problem_sets")
temperature_states = readRDS(here("problem_sets/data", "temperature_states.Rds"))
knitr::opts_chunk$set(echo = TRUE)
# Setting objects
c = matrix(c(12547, 4818, 3440, 8583, 6657, 4990, 14493, 7990, 6139, 7043, 3758, 1487, 13238, 11033, 4921),
nrow = 5,
ncol = 3,
byrow = TRUE)
p = c(1.05, 1.04, 1.1)
r = c(1.1, 1.09, 1.14)
alpha = 0.18
# Estimating beta using MME
beta_1 = c()
for (i in 1:nrow(c)) {
c_1 = c[i, 1]
c_2 = c[i, 2]
p_1 = p[1]
r_2 = r[2]
beta_1[i] = (p_1*c_1^(-alpha))/(r_2*c_2^(-alpha))
}
beta_hat_1 = sum(beta_1)/length(beta_1)
beta_2 = c()
for (i in 1:nrow(c)) {
c_2 = c[i, 2]
c_3 = c[i, 3]
p_2 = p[2]
r_3 = r[3]
beta_2[i] = (p_2*c_2^(-alpha))/(r_3*c_3^(-alpha))
}
beta_hat_2 = sum(beta_2)/length(beta_2)
# Beta estimates
print(c(beta_hat_1, beta_hat_2))
# Loading data
pacman::p_load(
here
)
iv_data = readRDS(here("problem_sets/data", "iv_data.Rds"))
