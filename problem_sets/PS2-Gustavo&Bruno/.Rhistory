# Loading needed packages
pacman::p_load(
tidyverse
)
# Loading needed packages
pacman::p_load(
tidyverse,
here
)
# Importing database
blp_data = readRDS("bpl-data.Rds")
# Importing database
blp_data = readRDS(here("bpl-data.Rds"))
# Importing database
blp_data = readRDS(here("PS2-Gustavo&Bruno/data", "bpl-data.Rds"))
# Importing database
blp_data = readRDS(here("PS2-Gustavo&Bruno/data", "blp-data.Rds"))
# Importing database
blp_data = readRDS(here("data", "blp-data.Rds"))
View(blp_data)
# Calculating the non-participants market share per year
mrkt_share_non_participants = blp_data %>%
group_by(year) %>%
summarize(s_0 = 1 - sum(share, na.rm = TRUE))
View(mrkt_share_non_participants)
# Adding s_0 values to the original database
blp_data = blp_data %>%
left_join(mrkt_share_non_participants, by = "year")
# Importing database
blp_data = readRDS(here("data", "blp-data.Rds"))
# Calculating the non-participants market share per year
mrkt_share_non_participants = blp_data %>%
group_by(year) %>%
summarize(s_0 = 1 - sum(share, na.rm = TRUE))
# Adding s_0 values to the original database
blp_data = blp_data %>%
left_join(mrkt_share_non_participants, by = "year") %>%
# Calculating the δ_j values
mutate(delta_j = log(share) - log(s_0))
# Importing database
blp_data = readRDS(here("data", "blp-data.Rds"))
# Calculating the non-participants market share per year
mrkt_share_non_participants = blp_data %>%
group_by(year) %>%
summarize(s_0 = 1 - sum(share, na.rm = TRUE))
# Adding s_0 values to the original database
blp_data = blp_data %>%
left_join(mrkt_share_non_participants, by = "year") %>%
# Calculating the δ_j values
mutate(delta_j = log(share) - log(s_0)) %>%
# Selecting convenient columns
select(year, car_id, share, s_0, delta_j)
# Importing database
blp_data = readRDS(here("data", "blp-data.Rds"))
# Adding s_0 values to the original database
blp_data = blp_data %>%
left_join(mrkt_share_non_participants, by = "year") %>%
# Calculating the δ_j values
mutate(delta_j = log(share) - log(s_0))
# Printing result
head(blp_data %>%
# Selecting convenient columns
select(year, car_id, share, s_0, delta_j))
teste = blp_data %>%
group_by(car_id, year) %>%
summarise(count = n())
View(teste)
rm(teste)
teste = blp_data %>%
group_by(car_id) %>%
summarise(count = n())
View(teste)
teste = blp_data %>%
group_by(model_id) %>%
summarise(count = n())
teste = blp_data %>%
group_by(model_id, year) %>%
summarise(count = n())
# Printing result
head(blp_data %>%
# Selecting convenient columns
select(year, model_id, share, s_0, delta_j))
teste = blp_data %>%
group_by(model_id, firm_id, year) %>%
summarise(count = n())
View(teste)
blp_data %>% filter(model_id == "AD100289" & year == 1989)
# Printing result
head(blp_data %>%
group_by(model_id) %>%
summarise(share = mean(share),
s_0 = mean(s_0),
delta_j = mean(delta_j)))
# Printing result
head(blp_data %>%
# Selecting convenient columns
select(model_id, share, s_0, delta_j))
# Estimating
model = lm(delta_j ~ hpwt + air + mpd + space + price, data = blp_data)
# Printing the result
summary(model)
# Printing the result
summary_model = summary(model)
summary_model
# Extracting analytical OLS standard errors
ols_se = summary_model$coefficients[, "Std. Error"]
# Implementing non-parametric bootstrap
set.seed(123)  # Set seed for reproducibility
B = 100       # Number of bootstrap repetitions
bootstrap_estimates = matrix(NA, nrow = B, ncol = length(coef(model)))  # Matrix to store bootstrap coefficients
for (b in 1:B) {
# Resample data indices with replacement
sample_indices = sample(1:nrow(blp_data), replace = TRUE)
bootstrap_sample = blp_data[sample_indices, ]
# Fit the model to the bootstrap sample
bootstrap_model = lm(delta_j ~ hpwt + air + mpd + space + price, data = bootstrap_sample)
# Store the estimated coefficients
bootstrap_estimates[b, ] = coef(bootstrap_model)
}
# Step 3: Calculate bootstrap standard errors
bootstrap_se = apply(bootstrap_estimates, 2, sd)
# Step 4: Create a comparison table for OLS and bootstrap standard errors
comparison = data.frame(
attribute = names(ols_se),
ols_se = ols_se,
bootstrap_se = bootstrap_se
)
# Print the comparison results
View(comparison)
comparison
# Print the comparison results
comparison
View(comparison)
# Creating a comparison table for OLS and bootstrap standard errors
comparison = data.frame(
attribute = names(ols_se),
ols_se = ols_se,
bootstrap_se = bootstrap_se
) %>%
mutate(attribute = ifelse(attribute == "(Intercept)", "intercept", attribute))
# Print the comparison results
comparison
